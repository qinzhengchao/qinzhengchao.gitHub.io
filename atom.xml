<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qinzhengchao.github.io/"/>
  <updated>2019-06-29T03:18:14.567Z</updated>
  <id>http://qinzhengchao.github.io/</id>
  
  <author>
    <name>qinzhengchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习</title>
    <link href="http://qinzhengchao.github.io/2019/06/29/python%E5%AD%A6%E4%B9%A0/"/>
    <id>http://qinzhengchao.github.io/2019/06/29/python学习/</id>
    <published>2019-06-29T02:19:00.000Z</published>
    <updated>2019-06-29T03:18:14.567Z</updated>
    
    <content type="html"><![CDATA[<p>SEVO 实验室<br><a id="more"></a></p><h1 id="一-变量和字符串"><a href="#一-变量和字符串" class="headerlink" title="一.变量和字符串"></a><strong>一.变量和字符串</strong></h1><p>首先：Python 每个语句结束可以不写分号 ;， 如 print(‘hello’) 打印 hello</p><h3 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a><strong>1.1 变量</strong></h3><p>变量的命名法：</p><p>驼峰式命名法<br>帕斯卡命名法</p><h3 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a><strong>1.2 字符串</strong></h3><h5 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h5><p>单引号 ‘ ‘或者双引号 “ “ 都可以，再或者 ‘’’ ‘’’ 三个引号，其中三个引号被用于过于长段的文字或者是说明，只要是三引号不完你就可以随意换行写下文字。</p><p>①字符串直接能相加，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 str1 = &apos;hi&apos;</span><br><span class="line">2 str2 = &apos;hello&apos;</span><br><span class="line">3 print(str + str2)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hi jaybo</span><br></pre></td></tr></table></figure></p><p>②字符串相乘，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 string = &apos;bang!&apos;</span><br></pre></td></tr></table></figure></p><p>打印 total 结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 bang!bang!bang!</span><br></pre></td></tr></table></figure></p><h5 id="2、字符串的分片与索引"><a href="#2、字符串的分片与索引" class="headerlink" title="2、字符串的分片与索引"></a>2、字符串的分片与索引</h5><p>字符串可以通过 string[x] 的方式进行索引、分片。</p><p>字符串的分片实际可以看作是从字符串中找出来你要截取的东西，复制出来一小段你要的长度，存储在另一个地方，而不会对字符串这个源文件改动。分片获得的每个字符串可以看作是原字符串的一个副本。</p><p>先看下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 name = &apos;My name is Mike&apos;</span><br><span class="line">2 print(name[0])</span><br><span class="line">3 &apos;M&apos;</span><br><span class="line">4 print(name[-4])</span><br><span class="line">5 &apos;M&apos;</span><br><span class="line">6 print(name[11:14]) # from 11th to 14th, 14th one is excluded</span><br><span class="line">7 &apos;Mik&apos;</span><br><span class="line">8 print(name[11:15]) # from 11th to 15th, 15th one is excluded</span><br><span class="line">9 &apos;Mike&apos;</span><br><span class="line">10 print(name[5:])</span><br><span class="line">11 &apos;me is Mike&apos;</span><br><span class="line">12 print(name[:5])</span><br><span class="line">13 &apos;My na&apos;</span><br></pre></td></tr></table></figure></p><p>:两边分别代表着字符串的分割从哪里开始，并到哪里结束。<br>以name[11:14]为例，截取的编号从第11个字符开始，到位置为14但不包含第14个字符结束。而像name[5:]这样的写法代表着从编号为5的字符到结束的字符串分片。相反，name[:5]则代表着从编号为0的字符开始到编号为5但包含第5个字符分片。可能容易搞混，可以想象成第一种是从5到最后面，程序员懒得数有多少个所以就省略地写，第二种是从最前面到5，同样懒得写0，所以就写成了[:5]。</p><h5 id="3、字符串的方法"><a href="#3、字符串的方法" class="headerlink" title="3、字符串的方法"></a>3、字符串的方法</h5><p>replace 方法：第一个参数表示被替代部分，第二个参数表示替代成怎样的字符串。<br>字符串填空，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 city = input(&quot;write the name of city:&quot;&quot;)</span><br><span class="line">2 url = &quot;http://apistore.baidu.com/mri.../weather?citypiny=&#123;&#125;.format(city)</span><br></pre></td></tr></table></figure></p><h5 id="4、问题"><a href="#4、问题" class="headerlink" title="4、问题"></a>4、问题</h5><p>Q1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 num = 1</span><br><span class="line">2 string = &apos;1&apos;</span><br><span class="line">3 print(num + string)</span><br></pre></td></tr></table></figure></p><p>这样会出错<br>解释：整数型不能和字符串直接相加。可以先把该字符串转为整数型，再相加，即 int(string)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 num = 1</span><br><span class="line">2 string = &apos;1&apos;</span><br><span class="line">3 print(num + int(string))</span><br></pre></td></tr></table></figure></p><h1 id="二-函数"><a href="#二-函数" class="headerlink" title="二.函数"></a><strong>二.函数</strong></h1><p>如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 判断数据类型：type(str) </span><br><span class="line">2 字符串类型数据转为整数型：int(str)</span><br></pre></td></tr></table></figure></p><h3 id="2-1函数格式"><a href="#2-1函数格式" class="headerlink" title="2.1函数格式"></a><strong>2.1函数格式</strong></h3><p>def 和 return 为关键字。</p><p>注意： 函数缩进后面的语句被称为是语句块，缩进是为了表名语句的逻辑与从属关系。缩进这个问题不能忽视，否则会导致代码无法成功运行，这里需要特别注意。</p><h3 id="2-2-函数参数"><a href="#2-2-函数参数" class="headerlink" title="2.2 函数参数"></a><strong>2.2 函数参数</strong></h3><p>①位置参数，举例，看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 def trapezoid_area(base_up, base_down, height):</span><br><span class="line">2 return 1/2 * (base_up + base_down) * height</span><br></pre></td></tr></table></figure></p><p>接下来我调用该函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trapezoid_area(1,2,3)</span><br></pre></td></tr></table></figure></p><p>不难看出，填入的参数1，2，3分别对应着参数 base_up，base_down 和 height。这种传入参数的方式被称作为位置参数。</p><p>②关键词参数：在函数调用的时候，将每个参数名称后面赋予一个我们想要传入的值，如调用 fun1 函数时候：fun1(a=1, b=2, c=3)。<br>③不定长参数<br>有时我们在设计函数接口的时候，可会需要可变长的参数。也就是说，我们事先无法确定传入的参数个数。<br>Python 提供了一种元组的方式来接受没有直接定义的参数。这种方式在参数前边加星号 * 。如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 def print_user_info( name ,  age  , sex = &apos;男&apos; , * hobby):</span><br><span class="line">2 # 打印用户信息</span><br><span class="line">3 print(&apos;昵称：&#123;&#125;&apos;.format(name) , end = &apos; &apos;)</span><br><span class="line">4 print(&apos;年龄：&#123;&#125;&apos;.format(age) , end = &apos; &apos;)</span><br><span class="line">5 print(&apos;性别：&#123;&#125;&apos;.format(sex) ,end = &apos; &apos; )</span><br><span class="line">6 print(&apos;爱好：&#123;&#125;&apos;.format(hobby))</span><br><span class="line">7 return;</span><br><span class="line">8</span><br><span class="line">9 # 调用 print_user_info 函数</span><br><span class="line">10 print_user_info( &apos;小明&apos; , 25, &apos;男&apos;, &apos;打篮球&apos;,&apos;打羽毛球&apos;,&apos;跑步&apos;)</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 昵称：小明 年龄：25 性别：男 爱好：(&apos;打篮球&apos;, &apos;打羽毛球&apos;, &apos;跑步&apos;)</span><br></pre></td></tr></table></figure></p><p>通过输出的结果可以知道，* hobby 是可变参数，且 hobby 其实就是一个 tuple （元祖）。</p><p>可变长参数也支持关键参数，没有被定义的关键参数会被放到一个字典里。这种方式即是在参数前边加 **，更改上面的示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 def print_user_info( name ,  age  , sex = &apos;男&apos; , ** hobby ):</span><br><span class="line">2 # 打印用户信息</span><br><span class="line">3 print(&apos;昵称：&#123;&#125;&apos;.format(name) , end = &apos; &apos;)</span><br><span class="line">4 print(&apos;年龄：&#123;&#125;&apos;.format(age) , end = &apos; &apos;)</span><br><span class="line">5 print(&apos;性别：&#123;&#125;&apos;.format(sex) ,end = &apos; &apos; )</span><br><span class="line">6 print(&apos;爱好：&#123;&#125;&apos;.format(hobby))</span><br><span class="line">7 return;</span><br><span class="line">8</span><br><span class="line">9 # 调用 print_user_info 函数</span><br><span class="line">10 print_user_info( name = &apos;小明&apos; , age = 25 , sex = &apos;男&apos;, hobby = (&apos;打篮球&apos;,&apos;打羽毛球&apos;,&apos;跑步&apos;))</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 昵称：小明 年龄：24 性别：男 爱好：&#123;&apos;hobby&apos;: (&apos;打篮球&apos;, &apos;打羽毛球&apos;, &apos;跑步&apos;)&#125;</span><br></pre></td></tr></table></figure></p><p>通过对比上面的例子和这个例子，可以知道，<em> hobby 是可变参数，且 hobby 其实就是一个 tuple （元祖），** hobby是关键字参数，且 hobby 就是一个 dict （字典）。<br>④ 只接受关键字参数<br>关键字参数使用起来简单，不容易参数出错，那么有些时候，我们定义的函数希望某些参数强制使用关键字参数传递，这时候该怎么办呢？将强制关键字参数放到某个</em>参数或者单个*后面就能达到这种效果,比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 def print_user_info( name , *, age, sex = &apos;男&apos; ):</span><br><span class="line">2 # 打印用户信息</span><br><span class="line">3 print(&apos;昵称：&#123;&#125;&apos;.format(name) , end = &apos; &apos;)</span><br><span class="line">4 print(&apos;年龄：&#123;&#125;&apos;.format(age) , end = &apos; &apos;)</span><br><span class="line">5 print(&apos;性别：&#123;&#125;&apos;.format(sex))</span><br><span class="line">6 return;</span><br><span class="line">7</span><br><span class="line">8 # 调用 print_user_info 函数</span><br><span class="line">9 print_user_info( name = &apos;小明&apos; ,age = 25 , sex = &apos;男&apos; )</span><br><span class="line">10</span><br><span class="line">11 # 这种写法会报错，因为 age ，sex 这两个参数强制使用关键字参数</span><br><span class="line">12 #print_user_info( &apos;小明&apos; , 25 , &apos;男&apos; )</span><br><span class="line">13 print_user_info(&apos;小明&apos;,age=&apos;22&apos;,sex=&apos;男&apos;)</span><br></pre></td></tr></table></figure></p><p>通过例子可以看，如果 age , sex 不适用关键字参数是会报错的。</p><h3 id="2-3-匿名函数"><a href="#2-3-匿名函数" class="headerlink" title="2.3 匿名函数"></a><strong>2.3 匿名函数</strong></h3><p>有没有想过定义一个很短的回调函数，但又不想用 def 的形式去写一个那么长的函数，那么有没有快捷方式呢？</p><p>——答案是有的。</p><p>Python 使用 lambda 来创建匿名函数，也就是不再使用 def 语句这样标准的形式定义一个函数。<br>匿名函数主要有以下特点：<br>lambda 只是一个表达式，函数体比 def 简单很多。<br>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。<br>lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。<br>基本语法：lambda [arg1 [,arg2,…..argn]]:expression<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 sum = lambda num1 , num2 : num1 + num2;</span><br><span class="line">2 print( sum( 1 , 2 ) )</span><br></pre></td></tr></table></figure></p><p>输出的结果： 3<br>注意：尽管 lambda 表达式允许你定义简单函数，但是它的使用是有限制的。 你只能指定单个表达式，它的值就是最后的返回值。也就是说不能包含其他的语言特性了， 包括多个语句、条件表达式、迭代以及异常处理等等。</p><p>匿名函数中，有一个特别需要注意的问题，比如，把上面的例子改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 num2 = 100</span><br><span class="line">2 sum1 = lambda num1 : num1 + num2 ;</span><br><span class="line">3 </span><br><span class="line">4 num2 = 10000</span><br><span class="line">5 sum2 = lambda num1 : num1 + num2 ;</span><br><span class="line">6 </span><br><span class="line">7 print( sum1( 1 ) )</span><br><span class="line">8 print( sum2( 1 ) )</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 10001</span><br><span class="line">2 10001</span><br></pre></td></tr></table></figure></p><p>这主要在于 lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。所以建议还是遇到这种情况还是使用第一种解法。</p><h1 id="三、循环与判断"><a href="#三、循环与判断" class="headerlink" title="三、循环与判断"></a><strong>三、循环与判断</strong></h1><h3 id="3-1-布尔表达式和判断"><a href="#3-1-布尔表达式和判断" class="headerlink" title="3.1 布尔表达式和判断"></a><strong>3.1 布尔表达式和判断</strong></h3><p>Python 中的布尔类型值：True 和 Flase 其中，注意这两个都是首字母大写。<br>但凡能够产生一个布尔值的表达式为布尔表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 1 &gt; 2 # False</span><br><span class="line">2 1 &lt; 2 &lt;3 # True</span><br><span class="line">3 42 != &apos;42&apos; # True</span><br><span class="line">4 &apos;Name&apos; == &apos;name&apos; # False</span><br><span class="line">5 &apos;M&apos; in &apos;Magic&apos; # True</span><br><span class="line">5 number = 12</span><br><span class="line">6 number is 12 # True</span><br></pre></td></tr></table></figure></p><p>注1：不同类型的对象不能使用&lt;、&gt;、&lt;=、=&gt;进行比较，却可以使用==和!=。<br>注2：浮点类型和整数类型虽然是不同类型，但不影响比较运算。还有，不等于!= 可以写作&lt;&gt; 。<br>布尔类型可以比较的 如：True &gt; Flase，回答是可以的，Ture 和 Flase 对于计算机就像是 1 和 0 一样，所以结果是真，即True。</p><h5 id="3-2-条件控制"><a href="#3-2-条件控制" class="headerlink" title="3.2 条件控制"></a><strong>3.2 条件控制</strong></h5><p>所谓条件成立，指的是返回值为True的布尔表达式</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AD快捷键</title>
    <link href="http://qinzhengchao.github.io/2019/06/28/AD%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://qinzhengchao.github.io/2019/06/28/AD快捷键/</id>
    <published>2019-06-28T13:54:39.000Z</published>
    <updated>2019-06-28T13:59:16.354Z</updated>
    
    <content type="html"><![CDATA[<p>this is the eleventh passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="AD16常用高效编辑命令"><a href="#AD16常用高效编辑命令" class="headerlink" title="AD16常用高效编辑命令"></a><strong>AD16常用高效编辑命令</strong></h1><p>SCH图缩放：ctrl+滚轮   SCH图左右移动：shift+ctrl+滚轮</p><p>在PCB中，shift+滚轮：左右移动PCB图，  ctrl+滚轮：缩放PCB图。滚轮：上下移动PCB图。</p><p>电原理图有一部分零件被覆盖屏蔽时，按shift+c，可清除覆盖。<br>在零件库中绘制零件时缩放显示比例，按UP/DOWN   + / -  健可以缩放大小。<br>在SCH图中，先按下左键不放，再按下ctrl健，就可以带导线移动零件。</p><p>在SCH图上，按住右键不放，可以拖动SCH整图任意移动。<br>在SCH 、PCB 、零件库3种编辑方式中，都可以单击右键，弹出很多右键菜单，供选择很多种功能，这些功能足够绘图使用了。比从菜单中选择功能更方便快捷，在零件上单击右键比在空白区单击右键，弹出的功能更多。</p><p>在修改了SCH图后，必须把修改的内容要同步更新到PCB图中：在SCH图显示模式———点击菜单：设计—–更新PCB文档。<br>在修改了PCB图后，要把修改的内容同步更新SCH图，在PCB图显示模式——–点击菜单：设计—–更新SCH图。</p><p>如果想查看SCH图与PCB图的差异：在SCH图下——-点击菜单：工程—–显示差异。也可以在PCB图下：点击菜单：工程——显示差异。正常时，两者应当没有差异。</p><p>放置总线时，要填写好总线名和总线端口名。</p><p>PCB板中的零件怎样摆齐：在PCB图中放置零件时，把零件摆齐：同时选中几个要摆齐的零件——–单击屏幕顶部菜单：edit——-align.<br>放置铺铜：单击屏幕顶部菜单：place——polygon pour</p><p>在PCB图中快速移动零件的方法：先选中要移动的零件：ctrl+shift键+箭头快速移动零件。<br>PCB上精准、微动零件：左键单击选择一个零件—–按住CTRL键同时按箭头键——-每按一次箭头，零件微动一次。如果不按CTRL键只按箭头键—–光标微动。</p><p>在PCB布线中，按下*键，切换布线的层，比如从当前的顶层切换到底层，同时自动放置过孔。按+  —键在前后相邻信号层之间切换。布线中按下entry键，就确定了前一段的线段：放置线到当前光标的位置。<br>PCB编辑整体下下—–按L键——打开PCB板层设置对话框。<br>想查看一个零件的属性且修改属性：左键点击这个零件/选中这个零件——按F11弹出inspector面板——-在inspector面板中显示该零件属性并可以修改属性。</p><p>AD16屏幕右上角：单击：DXP按钮———从弹出的下拉菜单中现在：参数选择——–弹出：选择面板——-设置AD16系统、AD16文档的全部设置项（多达上百项）。</p><p>调出快捷键列表：点击view—-workspacepanel—–help—–shortcuts,弹出快捷键列表，常用的快捷键如果记不住，可在这里查看。可把快捷键列表固定在AD16屏幕左边缘，便于在画图中经常使用。命令特别多，有些命令很有用，显著提高SCH  PCB画图的速度和效率。</p><p>双层手动布线，使用Shift+SPACEBAR来选择各种线的角度模式。角度模式包括：任意角度、45 °、弧度45 °、90 °和弧度90 °。按空格键切换角度。</p><p>在任何时间按END键来刷新屏幕。</p><p>在任何时间使用V，F重新调整屏幕以适应所有的对象。在任何时候按PAGE UP和PAGE DOWN键，以光标位置为核心，来缩放视图</p><p>按BACKSPACE键，来取消放置的上一条线。</p><p>要删除线，先单击选中它呈高亮状态———-按下DELETE键来清除所选的线段。<br>重布线是非常简便的——当用户布置完一条线并右击完成时，多余的线段会被自动清除。<br>取消全部的布线，Tools&gt;&gt;Un-Route&gt;&gt;All<br>自动布线—–全部：Auto Route&gt;&gt;All。Messages显示自动布线的过程。</p><p>Solder mask：阻焊层（PCB板表面的一层绿色绝缘漆）。包括顶层阻焊层和底层阻焊层。阻焊层除留出焊点和过孔的位置外，其余部分用阻焊膜（绿色绝缘漆）将铜膜导线覆盖住。通过设置规则design rules控制阻焊膜的大小。</p><p>助焊层：包括顶层助焊层和底层助焊层。助焊层是在需要焊接的地方涂一层助焊剂，以增强焊盘的着锡能力。通过design rules进行设置。</p><p>PCB板上选择部件：对准零件点击左键：选中这一个零件，按住shift键同时点击任意几个不在一起的零件：这几个零件被同时选中。在空白的地方点击左键，取消选中状态。选择PCB板中任意部件的更多的操作方法，在屏幕顶部的编辑edit菜单内。</p><p>PCB绘图时的快捷键：先选中对象，然后按下表的快捷键操作：<br><img src="/images/AD.png" alt=""> </p><p>PCB 编辑器里有特殊粘贴命令—Edit» Paste Special。这个命令可以一次粘贴多个已拷贝的对象。在使用该命令时先选择 Edit »Copy (EC) 或 Edit » Cut 将选择的对象拷贝到剪贴板，然后点击选择粘贴参考点，该参考点就是今后复制对象时的鼠标定位点。</p><p>在PCB图中，寻找一个零件困难时：点击 Edit » Move »Component (M C)——点击PCB的空白区域（不要点击在零件上）,就会出现 ChooseComponent 对话框—-在出现的元件列表中,选中将要放置的元件。</p><p>把SCH图更新到PCB图时，把SCH图中的零件加载到PCB图的一旁，零件密集的挤在一团，很困难找到要找的零件 找到PCB图中零件的另外一个技巧是使用原理图作为参考：在原理图中选中要找的元件,然后选择菜单 Tools »Select PCB Components——选中PCB图中的指定零件—-选中的零件跳到PCB板图的屏幕中心并高亮显示该零件。</p><p>在PCB零件布局状态下—按N键—–消隐预拉线 —–再按N键—–恢复显示。</p><p>在零件加载到PCB板但还没有布线之前：当你移动元件的时候，点击 N 键，将不会显示相关飞线。点击 L 键，可以选择把元件放置在顶层还是底层。在PCB布线时，按 Shift+W 会显示布线宽度种类。使用参数对话框中的 FavoriteInteractive Routing Widths 按钮来配置列表。</p><p>画好SCH图更新到PCB图中后，在没有布线前，各零件间有浅白色的预拉线，对重要的预拉线可以改为醒目的颜色，方法：在PCB图下—-点击屏幕右下角的PCB钮—–弹出PCB面板—–单击ALL NETS全部网络—–双击重要的网络—–改变颜色——确定。它能帮助你把重要的网络预拉线改变颜色。要做这个就要在 PCB 面板内双击网络名称，你也可以快速控制预拉线是否显示，只要使用 N 键即可 。使用 L 键会跳出层面及颜色设定，可以调整颜色以及层面是否显示。＊号键可以切换到下一个布线层。按 CTRL+G 快捷键显示并且编辑现在所使用的格点。</p><p>在PCB板上一边布线同时按TAB键—–弹出布线规则修改对话框—–修改线宽、过孔大小、布线遇到障碍时的解决方案</p><p>PCB差分对布线：同时布1对线【2根线】<br>PCB多根布线：用于布总线、数据线、地址线。</p><p>点选 Autoroute 菜单里面的 ALL，选择预设两层板，如果你想保持你已走的线，勾选 Lock AllPre-routes 选项，并且开始自动布线，检查布线的结果。  </p><p>为了更容易检查PCB板的每个层面，按 shift+S 快捷键去切换成单层显示模式，然后按 *号键切换顶层跟底层。如要高亮显示某个网络时，可以按住 CTRL 键并且左键点到该网络。左键点对象的地方就会自动取消高亮了。持续这个操作。如果你的电路板在单层模式， 你在布线网络检查框中能使显示全部对象，来现示所有层的布线。</p><p>对一个两层电路板来说一层为水平方向布线，另一层为垂直方向布线是比较好的。按空格键可以切换在 45 度角的时候布线起止模式。按shift+spacebar 键可以切换转角模式 。按 CTRL+CLICK：当你点击到网络时会高亮可以调整 Mask Level 指令调整淡化效果 。在布线时按 shift+r 快捷模式键切换违反冲突模式。</p><p>如果PCB板上的零件不能旋转和移动，这个零件被锁定了，双击零件打开属性，把锁定勾选去掉。</p><p>使用 PCB Library面板的右键菜单命令拷贝/粘贴多个器件。按住 Ctrl 并单击选择列表中需要的器件封装，然后右键单击选择 Copy，再次右键单击，选择 Paste X Components （X 是您选择的器件封装数）。</p><p>在SCH图或PCB图编辑窗口下，随时打开零件库的方法：单击在屏幕左下角的system ——-库——可以随时打开电路图零件库</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the eleventh passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高级电子技术</title>
    <link href="http://qinzhengchao.github.io/2019/06/17/%E9%AB%98%E7%BA%A7%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E8%B6%85%E7%BA%A7%E7%94%B5%E5%AE%B9%E4%B8%93%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://qinzhengchao.github.io/2019/06/17/高级电子技术超级电容专题报告/</id>
    <published>2019-06-17T15:26:05.000Z</published>
    <updated>2019-06-28T13:56:47.491Z</updated>
    
    <content type="html"><![CDATA[<p>this is the tenth passage of HEXO<br>SEVO 实验室<br><a id="more"></a><br>超级电容专题报告</p><p>信息科学与工程学院      180200214      秦钲超</p><p>超级电容在近几年发展非常迅速，逐渐进入人们的视野。通过极化电解质来储能的一种电化学元件。它不同于传统的化学电源，是一种介于传统电容器与电池之间、具有特殊性能的电源，主要依靠双电层和氧化还原假电容电荷储存电能。但在其储能的过程并不发生化学反应，这种储能过程是可逆的，也正因为此超级电容器可以反复充放电数十万次。其基本原理和其它种类的双电层电容器一样，都是利用活性炭多孔电极和电解质组成的双电层结构获得超大的容量。超级电容有很多的优点,第一点是充电速度快，充电10秒～10分钟可达到其额定容量的95%以上，第二点循环使用寿命长，深度充放电循环使用次数可达1~50万次，没有“记忆效应”第三点是超级电容的大电流放电能力超强，能量转换效率高，过程损失小，大电流能量循环效率≥90%，除此之外超级电容还有功率密度高的特点，可达300W/KG~5000W/KG，相当于电池的5~10倍，充放电线路简单，无需充电电池那样的充电电路，安全系数高，长期使用免维护，剩余电量便于读取。<br>超级电容控制板电路应用到的一系列芯片将在下面进行简单的介绍，主控部分选择的是STM32C8T6芯片，其次是选用合适的磁电流传感器，在此选用的是型号为TLI4970的磁电流传感器，下图为该芯片各引脚以及引脚功能</p><p>该芯片由ams1117-3.3v降压芯片减压后提供电压，电源模块选用B2405，在网上查询该芯片数据手册后了解到该芯片体积小，功率密度高，效率高，热稳定性好，该芯片输入电压为24v，输出电压为5v，该芯片24v的输入电压由超级电容提供，下图为B2405芯片的应用电路，输出电压不同是，电容值随之发生改变<br>数模转换芯片采用DAC5571IDBVR，该芯片供电电压范围为2.7v-5.5v，在此采用3.3v电压供电，由ams1117-3.3v降压芯片为该芯片供电，下图为该芯片引脚分布表以及功能定义</p><p>在此需要注意该芯片反向输入电压最大为0.3v，其应用电路如下图所示</p><p>电路中采用的LTC1473是双通道PowerPathTM开关驱动器，根据在网上查到的资料，该芯片用于具多个 DC 电源之系统的电源通路管理，全 N 沟道开关操作以降低功率损失和系统成本，开关和隔离高达 30V 的电源，用于N沟道栅极驱动的自适应高电压升压型稳压器，电容器浪涌和短路电流限制，用户可编程定时器用以限制开关功耗，同时具有小占板面积：16 引脚窄体 采用SSOP 封装。LTC1473 驱动两组背对背 N 沟道 MOSFET 开关，以将功率传送至主系统开关稳压器的输入。一个内部升压型稳压器负责提供电压以全面强化逻辑电平 N 沟道 MOSFET 开关。 LTC1473 可检测电流，以限制开关切换或故障情况下进出电池和系统电源电容器的浪涌电流。一个用户可编程定时器用于监视 MOSFET 开关处于电流限制状态的时间，并在设定的时间被超过之时将其锁断。 一种独特的“双二极管模式”逻辑确保了系统启动，这与哪个输入先接收到功率无关。该芯片典型应用电路如下图所示<br>引脚分布如下图所示</p><p>CAN总线收发芯片采用TJA1050t，该芯片输入电压范围为4.75v-5.25v（如图）</p><p>该芯片引脚分布以及定义如下图所示</p><p>TVS二极管采用Rclamp3304和SMAJ26A两种，引脚分布以及各引脚功能如下图</p><p>SMAJ26A TVS二极管输入电压可以达到26v<br>主控芯片STM32C8T6不必再进行过多的介绍，在做船赛的时候曾经画过单片机小系统，即以STM32C8T6为主控芯片的单片机。<br>涉及到超级电容，需要了解的是升压电路，降压电路和升降压电路<br>首先来说一下降压电路（以下是经常应用的降压电路以及对应的芯片）<br> 12转5v时常用7805，转-5v时候会用7905。</p><p>7.2v转5v也很常见，一般直接用lm2940,电路如下：</p><p>7.2v转3.3v用lm1117，电路如下：</p><p>5v转3.3v用AMS1117电路图如下：</p><p>升压电路则通常选择BOOST升压电路<br>其实使用DCDC电路就可以实现三种功能，即升压，降压，升降压功能<br>下面从我自己写的博客中摘取一部分<br>工作原理：<br>Dcdc电路：<br>DC-DC是英语直流变直流的缩写，所以DC-DC电路是某直流电源转变为不同电压值的电路。DC-DC是开关电源技术的一个分支，开关电源技术包括AC-DC、DC-DC两ff个分支。DC-DC电路按功能分为：<br>升压变换器：将低电压变换为高电压的电路。<br>降压变换器：将高电压变换为低电压的电路。<br>反向器：将电压极性改变的电路，有正电源变负电源，负电源变正电源两类。<br>三个主要分支，当然应用时在同一电路中会有升压反向、降压升压等功能同时存在。<br>DC-DC变换器的基本电路有升压变换器、降压变换器、升降压变换器三种。<br>dcdc电路原理：<br>降压变换器原理图如图1所示，当开关闭合时，加在电感两端的电压为（Vi-Vo），此时电感由电压（Vi-Vo）励磁，电感增加的磁通为：（Vi-Vo）*Ton。<br>当开关断开时，由于输出电流的连续，二极管VD变为导通，电感削磁，电感减少的磁通为：（Vo）Toff。<br>当开关闭合与开关断开的状态达到平衡时，（Vi-Vo）Ton=（Vo）Toff，由于占空比D&lt;1，所以Vi&gt;Vo，实现降压功能。<br>图当开关闭合与开关断开的状态达到平衡时，（Vi-Vo）Ton=（Vo）Toff，由于占空比D&lt;1，所以Vi&gt;Vo，实现降压功能。</p><pre><code>升压变换器原理图如图2所示，当开关闭合时，输入电压加在电感上，此时电感由电压（Vi）励磁，电感增加的磁通为：（Vi）Ton。</code></pre><p>当开关断开时，由于输出电流的连续，二极管VD变为导通，电感削磁，电感减少的磁通为：（Vo- Vi）Toff。<br>当开关闭合与开关断开的状态达到平衡时，（Vi）Ton=（Vo- Vi）Toff，由于占空比D&lt;1，所以Vi&lt;Vo，实现升压功能。</p><pre><code>升降压变换器、入出极性相反原理如图3,当开关闭合时，此时电感由电压（Vi）励磁，电感增加的磁通为：（Vi）Ton；当开关断开时，电感削磁，电感减少的磁通为：（Vo）Toff。当开关闭合与开关断开的状态达到平衡时，增加的磁通等于减少的磁通，（Vi）Ton=（Vo）*Toff，根据Ton比Toff值不同，可能Vi&lt; Vo，也可能Vi&gt;Vo。</code></pre><p>综上，可通过DCDC外部电感和二极管的接法来判断DCDC的类型：<br>1&gt;若二极管负向接SW，正向接地，且电感接SW和负载之间。则为降压DCDC。<br>2&gt;若电感接电源和SW之间，二极管正向接SW，负向接负载。则为升压DCDC。<br>3&gt;若电感接SW和地之间，二极管负向接SW，正向接负载。则为升降压DCDC</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the tenth passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MATLAB 2018a 官方教程(二)</title>
    <link href="http://qinzhengchao.github.io/2019/04/21/MATLAB-2018a-%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://qinzhengchao.github.io/2019/04/21/MATLAB-2018a-官方教程-二/</id>
    <published>2019-04-21T03:08:49.000Z</published>
    <updated>2019-06-12T15:55:59.286Z</updated>
    
    <content type="html"><![CDATA[<p>this is the eighth passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="MATLAB-2018a-官方教程-二"><a href="#MATLAB-2018a-官方教程-二" class="headerlink" title="MATLAB 2018a 官方教程(二)"></a><strong>MATLAB 2018a 官方教程(二)</strong></h1><h3 id="一-Matlab系统环境"><a href="#一-Matlab系统环境" class="headerlink" title="一.Matlab系统环境"></a><strong>一.Matlab系统环境</strong></h3><p>1.&gt;&gt; :命令提示符</p><ol start="2"><li>…   : 续行符<br>3.修改文件夹；①文件夹工具栏修改②cd命令<br>4.工作区：变量的显示与操作<br>5.如果给内部函数赋值，恢复需要在工作区删掉这个变量就行<br>6.搜索路径：变量-&gt;内部函数-&gt;程序文件<br>7.设置搜索路径：①path命令②主页，环境:设置路径<h3 id="二-Matlab数值数据"><a href="#二-Matlab数值数据" class="headerlink" title="二.Matlab数值数据"></a><strong>二.Matlab数值数据</strong></h3><h5 id="数值数据分类"><a href="#数值数据分类" class="headerlink" title="数值数据分类:"></a><strong>数值数据分类:</strong></h5>整型:</li></ol><p>无符号：8位，16，32，64；int8，uint8：强制转换类函数<br>带符号：8位，16，32，64</p><p>浮点型:</p><p>单精度：4字节；single，转化函数<br>双精度：8字节；double，转化函数；数字数据默认为双精度。</p><p>复数型:</p><p>实部和虚部，默认双精度。虚数单位j或者i；real()，imag()，求实部和虚部。</p><h5 id="数值数据的输出格式：format-格式符"><a href="#数值数据的输出格式：format-格式符" class="headerlink" title="数值数据的输出格式：format 格式符"></a><strong>数值数据的输出格式：format 格式符</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; format long</span><br><span class="line">Trial&gt;&gt; 3/2</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">   1.500000000000000</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; format</span><br><span class="line">Trial&gt;&gt; 3/2</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    1.5000</span><br></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h5><p>format只能影响数据的输出格式，不影响数据的计算和储存；</p><h5 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a><strong>常用数学函数</strong></h5><p>(1) 函数的自变量规定为矩阵变量，当然也可以是标量，标量本身是矩阵的一种特例；<br>运算时是将函数逐项作用于矩阵的每一个元素上，最后运算的结果就是一个与自变量同型的矩阵。<br>(2)常用函数的应用<br>①以角度为单位的就在函数名后面加“d”,用来区别；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; sin(pi/2)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     1</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; sind(90)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     1</span><br></pre></td></tr></table></figure></p><p>②abs：绝对值，复数的模，字符串ascII<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; abs(-4)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; abs(3+4i)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     5</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; abs(&apos;a&apos;)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    97</span><br></pre></td></tr></table></figure></p><p>③取整的函数：<br>round 四舍五入<br>ceil 向上取整<br>floor 向下取整<br>fix 舍去小数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; round(4.7)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     5</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; ceil(-3.8)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    -3</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; floor(3.6)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; fix(-3.2)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    -3</span><br></pre></td></tr></table></figure></p><p>④举例：求345每一位数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; m = 345;</span><br><span class="line">Trial&gt;&gt; m1 = rem(m,10); % 求余数</span><br><span class="line">Trial&gt;&gt; m2 = rem(fix(m/10),10);</span><br><span class="line">Trial&gt;&gt; m3 = fix(m/100);</span><br><span class="line">Trial&gt;&gt; [m1 m2 m3]</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     5     4     3</span><br></pre></td></tr></table></figure></p><p>100以内的素数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; x=1:100;</span><br><span class="line">Trial&gt;&gt; k=isprime(x);  % 判断素数</span><br><span class="line">Trial&gt;&gt; k1=find(k); % 找到序号</span><br><span class="line">Trial&gt;&gt; p=x(k1)</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line"></span><br><span class="line">  1 至 9 列</span><br><span class="line"></span><br><span class="line">     2     3     5     7    11    13    17    19    23</span><br><span class="line"></span><br><span class="line">  10 至 18 列</span><br><span class="line"></span><br><span class="line">    29    31    37    41    43    47    53    59    61</span><br><span class="line"></span><br><span class="line">  19 至 25 列</span><br><span class="line"></span><br><span class="line">    67    71    73    79    83    89    97</span><br></pre></td></tr></table></figure></p><h3 id="三-变量及其操作"><a href="#三-变量及其操作" class="headerlink" title="三.变量及其操作"></a><strong>三.变量及其操作</strong></h3><p>变量：内存单元的抽象<br>变量名：字母开头。<br>变量的管理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; who</span><br><span class="line"></span><br><span class="line">您的变量为:</span><br><span class="line"></span><br><span class="line">ans  k    k1   m    m1   m2   m3   p    x    </span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; whos</span><br><span class="line">  Name      Size             Bytes  Class      Attributes</span><br><span class="line"></span><br><span class="line">  ans       1x3                 24  double               </span><br><span class="line">  k         1x100              100  logical              </span><br><span class="line">  k1        1x25               200  double               </span><br><span class="line">  m         1x1                  8  double               </span><br><span class="line">  m1        1x1                  8  double               </span><br><span class="line">  m2        1x1                  8  double               </span><br><span class="line">  m3        1x1                  8  double               </span><br><span class="line">  p         1x25               200  double               </span><br><span class="line">  x         1x100              800  double</span><br></pre></td></tr></table></figure></p><h3 id="四-Matlab矩阵"><a href="#四-Matlab矩阵" class="headerlink" title="四.Matlab矩阵"></a><strong>四.Matlab矩阵</strong></h3><p>建立：①[]②利用建立好的建立更大的<br>③复数矩阵<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; B=[1 2;3 4];</span><br><span class="line">Trial&gt;&gt; C=[5 6;7 8];</span><br><span class="line">Trial&gt;&gt; A = B + i*C</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">   1.0000 + 5.0000i   2.0000 + 6.0000i</span><br><span class="line">   3.0000 + 7.0000i   4.0000 + 8.0000i</span><br></pre></td></tr></table></figure></p><p>④冒号表达式<br>⑤linspace(a,b,n) n省略自动100个<br>结构矩阵（有名字）<br>单元矩阵（无名字），大括号括起来</p><h3 id="五，读取元素"><a href="#五，读取元素" class="headerlink" title="五，读取元素"></a><strong>五，读取元素</strong></h3><p>按照列存储，访问的数字就是内存的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt;  A=[1 2 3;4 5 6]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line"></span><br><span class="line">Trial&gt;&gt; A(3)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     2</span><br></pre></td></tr></table></figure></p><p>利用空矩阵删除矩阵的元素：赋值=[]<br>改变矩阵形状，reshape(A,m,n):只改变原矩阵的函数和列数，并不改变元素个数和存储顺序；<br>A(:) : 将A的每一列元素堆叠起来，成为一个列向量；</p><h3 id="六-基本运算"><a href="#六-基本运算" class="headerlink" title="六.基本运算"></a><strong>六.基本运算</strong></h3><p>/ 右除 \ 左除 ^ 乘方</p><p>加减运算</p><p>同型矩阵，对应元素加减<br>不同型，给出错误信息<br>一个标量也可以和矩阵进行加减运算，把标量和矩阵的每一个元素进行加减</p><p>乘法</p><p>A的列数和B的行数相等；</p><p>除法</p><p>A：非奇异方阵，B/A,等效Binv(A);A\B,等效inv(A)B;简单方法：把符号的斜度邪到平的；</p><p>乘方运算</p><p>A^x: A方阵，x标量</p><h6 id="6-2-点运算"><a href="#6-2-点运算" class="headerlink" title="6.2 点运算 .*  ./  .\  .^"></a><strong>6.2 点运算 .*  ./  .\  .^</strong></h6><p>对应元素进行相关计算，要求两矩阵同型</p><h6 id="6-3-关系运算"><a href="#6-3-关系运算" class="headerlink" title="6.3 关系运算"></a><strong>6.3 关系运算</strong></h6><p>~= 不等于</p><p>标量之间，比较大小<br>同型矩阵，相同位置元素按照标量关系运算规则，结果是一个与原矩阵同型的矩阵，它的元素由0和1组成。<br>标量和矩阵比较</p><h6 id="6-4-逻辑运算-amp"><a href="#6-4-逻辑运算-amp" class="headerlink" title="6.4 逻辑运算 &amp; | ~"></a><strong>6.4 逻辑运算 &amp; | ~</strong></h6><p>同型矩阵，对应比较<br>标量和矩阵</p><h3 id="七-字符型数据"><a href="#七-字符型数据" class="headerlink" title="七.字符型数据"></a><strong>七.字符型数据</strong></h3><p>把一个字符串作为一个行向量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">’i&apos;&apos;m a teacher&apos;   # 2个‘</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; ch = [&apos;dd&apos;;&apos;dddd&apos;]</span><br><span class="line"># 要串联的数组的维度不一致。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Trial&gt;&gt; ch=&apos;AC34cdvSDC4ferf&apos;;</span><br><span class="line">Trial&gt;&gt; subch = ch(1:5);          # 提取</span><br><span class="line">Trial&gt;&gt; revch=ch(end:-1:1);       # 反转</span><br><span class="line">Trial&gt;&gt; k=find(ch&gt;=&apos;a&apos;&amp;ch&lt;=&apos;z&apos;);  # 找到小写字母</span><br><span class="line">Trial&gt;&gt; ch(k) = ch(k) - (&apos;a&apos;-&apos;A&apos;);# 变大写</span><br><span class="line">Trial&gt;&gt; length(k);                # 统计小写字母</span><br></pre></td></tr></table></figure><h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a><strong>操作：</strong></h5><p>(1) 字符串的执行  eval(s)<br>(2) 字符串与数值的转换</p><p>abs和double可以获取字符串矩阵的acsII<br>char 可以把ASCII矩阵转换为字符串矩阵</p><p>(3)比较  返回值1和0</p><p>逻辑运算，维度相同，ascii比较<br>strcmp(s1,s2)<br>strncmp(s1,s2,n) 前n个<br>strcmpi(s1,s2)  忽略字母大小写<br>strncmpi(s1,s2,n)</p><p>(4) 查找和替换</p><p>findstr(s1,s2) 返回短字符串在长字符串的开始位置<br>strrep(s1,s2,s3) 将是s1中的所有子字符串s2替换s3</p><p>链接：<a href="https://www.jianshu.com/p/b7ab4f59344d" target="_blank" rel="noopener">https://www.jianshu.com/p/b7ab4f59344d</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the eighth passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MATLAB 2018a  官方教程(一)</title>
    <link href="http://qinzhengchao.github.io/2019/04/21/MATLAB-2018a-%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B/"/>
    <id>http://qinzhengchao.github.io/2019/04/21/MATLAB-2018a-官方教程/</id>
    <published>2019-04-21T01:55:27.000Z</published>
    <updated>2019-04-21T04:36:11.710Z</updated>
    
    <content type="html"><![CDATA[<p>this is the seventh passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>下面列出了常用的，包括实用项目</p><h3 id="界面操作命令"><a href="#界面操作命令" class="headerlink" title="界面操作命令"></a><strong>界面操作命令</strong></h3><p>clear 清除变量空间<br>clc 情空工作空间<br>内建变量 pi<br>内建函数 abs sqrt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; z = sqrt(-9)</span><br></pre></td></tr></table></figure></p><h3 id="变量：矩阵"><a href="#变量：矩阵" class="headerlink" title="变量：矩阵"></a><strong>变量：矩阵</strong></h3><h5 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a><strong>创建变量</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2 3 4] # row</span><br><span class="line">[2; 3; 4] #col</span><br><span class="line">[sqrt(10) pi^2] # 可以计算</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=1:3 #</span><br><span class="line">x=1:0.5:5 #</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=linspace(1,10,5)</span><br></pre></td></tr></table></figure><h5 id="转置"><a href="#转置" class="headerlink" title="转置"></a><strong>转置</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=x&apos;</span><br></pre></td></tr></table></figure><h5 id="创建随机数"><a href="#创建随机数" class="headerlink" title="创建随机数"></a><strong>创建随机数</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = rand(s) #5*5矩阵</span><br><span class="line">y = rand(5,1) # 5*1</span><br></pre></td></tr></table></figure><h5 id="0矩阵"><a href="#0矩阵" class="headerlink" title="0矩阵"></a><strong>0矩阵</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = zeros(6,3)</span><br></pre></td></tr></table></figure><h5 id="保存-载入变量空间"><a href="#保存-载入变量空间" class="headerlink" title="保存/载入变量空间"></a><strong>保存/载入变量空间</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; save datafile # datafile.mat</span><br><span class="line">&gt;&gt; load datafile # 载入里面的变量</span><br></pre></td></tr></table></figure><h5 id="加载其他文件的数据"><a href="#加载其他文件的数据" class="headerlink" title="加载其他文件的数据"></a><strong>加载其他文件的数据</strong></h5><p>1.选择txt这类的文件<br>2.选择加载后的变量类型和变量名字<br>3.加载</p><h5 id="提取矩阵数据"><a href="#提取矩阵数据" class="headerlink" title="提取矩阵数据"></a><strong>提取矩阵数据</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = data(6,3)</span><br><span class="line">y = data(end,3)</span><br><span class="line">z = data(end-1,3)</span><br><span class="line">p = data(:,2) # : 包括一整溜</span><br></pre></td></tr></table></figure><h5 id="矩阵的标量计算"><a href="#矩阵的标量计算" class="headerlink" title="矩阵的标量计算"></a><strong>矩阵的标量计算</strong></h5><p>可以仿照python的广播机制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.*  看作普通乘法</span><br><span class="line">*   看作是矩阵乘法</span><br></pre></td></tr></table></figure></p><h5 id="一些矩阵函数"><a href="#一些矩阵函数" class="headerlink" title="一些矩阵函数"></a><strong>一些矩阵函数</strong></h5><p>size函数可以应用于数组以产生包含数组大小的单个输出变量<br>size函数可应用于矩阵以生成单个输出变量或两个输出变量。使用方括号([])获取多个输出<br>max函数的第一个输出是输入向量的最大值。当用两个输出调用时，第二个输出是索引值</p><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a><strong>文档</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc max</span><br></pre></td></tr></table></figure><h5 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a><strong>绘图</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(x,y,&apos;r--*&apos;)</span><br></pre></td></tr></table></figure><p>要在另一条线上绘制一条线，请使用hold on命令在添加另一条线时保留上一个绘图。也可以使用hold off命令返回默认行为。<br>需要查阅关于绘图的一些默认单词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close all # 关闭所有的图</span><br></pre></td></tr></table></figure></p><p>可以用一个向量画一个直线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(v)</span><br></pre></td></tr></table></figure></p><p>绘图函数接受由属性名称和相关值组成的可选附加输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot (y,&apos;LineWidth&apos;,5)</span><br></pre></td></tr></table></figure></p><p>加标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title(&apos;Sample Densities&apos;)</span><br></pre></td></tr></table></figure></p><p>增加轴标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ylabel(&apos;Density (g/cm^3)&apos;)</span><br></pre></td></tr></table></figure></p><p>工具栏目绘制图：选择变量，选择图；</p><h5 id="项目"><a href="#项目" class="headerlink" title="项目"></a><strong>项目</strong></h5><p>增加曲线说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">legend(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)</span><br></pre></td></tr></table></figure></p><p>傅里叶变换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fft()</span><br></pre></td></tr></table></figure></p><p>得到向量的数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = numel(y)</span><br></pre></td></tr></table></figure></p><p>完整项目：音频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs = 10 #音频信号的采样频率。</span><br><span class="line">t = 0:1/fs:20; #音频信号采集时间。</span><br><span class="line">y = sin(1.8*2*pi*t) + sin(2.1*2*pi*t): #音频信号幅度在每个采样。</span><br><span class="line">yfft = fft(y); # y的傅里叶变换</span><br><span class="line">n = numel(y);</span><br><span class="line">f = 0:fs/n:fs*(n-1)/n; #与yfft中的值对应的频率。</span><br><span class="line">plot(f,abs(yfft))</span><br></pre></td></tr></table></figure></p><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><strong>逻辑运算符</strong></h5><p>和python的一样<br>&amp;|写一个就行了<br>逻辑矩阵可以选择出true的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1(v1==4) = 10</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the seventh passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>带通滤波器</title>
    <link href="http://qinzhengchao.github.io/2019/04/20/%E5%B8%A6%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <id>http://qinzhengchao.github.io/2019/04/20/带通滤波器/</id>
    <published>2019-04-20T13:03:02.000Z</published>
    <updated>2019-04-20T14:55:23.353Z</updated>
    
    <content type="html"><![CDATA[<p>this is the sixth passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="带通滤波器"><a href="#带通滤波器" class="headerlink" title="带通滤波器"></a><strong>带通滤波器</strong></h1><h3 id="巴特沃斯滤波器"><a href="#巴特沃斯滤波器" class="headerlink" title="巴特沃斯滤波器"></a><strong>巴特沃斯滤波器</strong></h3><p>巴特沃斯滤波器的特点是通频带内的频率响应曲线最大限度平坦，没有起伏，而在阻频带则逐渐下降为零。 在振幅的对数对角频率的波特图上，从某一边界角频率开始，振幅随着角频率的增加而逐步减少，趋向负无穷大。<br>一阶巴特沃斯滤波器的衰减率为每倍频6分贝，每十倍频20分贝。二阶巴特沃斯滤波器的衰减率为每倍频12分贝、三阶巴特沃斯滤波器的衰减率为每倍频18分贝、如此类推。巴特沃斯滤波器的振幅对角频率单调下降，并且也是唯一的无论阶数，振幅对角频率曲线都保持同样的形状的滤波器。只不过滤波器阶数越高，在阻频带振幅衰减速度越快。其他滤波器高阶的振幅对角频率图和低级数的振幅对角频率有不同的形状。</p><h5 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a><strong>设计步骤</strong></h5><p>如设计一个数字低通滤波器，其技术指标为：<br>通带临界频率fp ，通带内衰减小于rp；<br>阻带临界频率fs，阻带内衰减大于αs；采样频率为FS<br>1、将指标变为角频率 wp=fp<em>2</em>pi;ws= fs<em>2</em>pi;<br>2、将数字滤波器的频率指标{Wk}由wk=（2/T）tan（Wk/2）转换为模拟滤波器的频率指标{wk}，由于是用双线性不变法设计，故先采取预畸变。<br><img src="/images/巴特沃斯滤波器1.png" alt=""><br>3、将高通指标转换为低通指标，进而设计高通的s域模型<br>4、归一化处理<br><img src="/images/巴特沃斯滤波器2.png" alt=""><br>由以上三式计算出N，查表可得模拟低通滤波器的阶数，从而由下式确定模拟高通滤波器的参数。<br><img src="/images/巴特沃斯滤波器5.png" alt=""></p><h5 id="仿真程序的设计与调试"><a href="#仿真程序的设计与调试" class="headerlink" title="仿真程序的设计与调试"></a><strong>仿真程序的设计与调试</strong></h5><p>数字域指标变换成模拟域指标<br>其程序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fp = 400 fs= 300;</span><br><span class="line">Rp = 1; Rs = 20;</span><br><span class="line">wp =fp*2*pi;</span><br><span class="line">ws =fs*2*pi;</span><br><span class="line">FS=1000;T=1/FS；</span><br></pre></td></tr></table></figure></p><p>程序执行结果为：wp=2.5133e+003 ws=1.8850e+003 与实际计算结果相符。</p><h5 id="数字域频率进行预畸变"><a href="#数字域频率进行预畸变" class="headerlink" title="数字域频率进行预畸变"></a><strong>数字域频率进行预畸变</strong></h5><p>其程序为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wp2=2*tan（Wp/2）/T;</span><br><span class="line">ws2=2*tan（Ws/2）/T;</span><br><span class="line">经过预畸变，可以发现频率变为： wp2= 6.1554e+003</span><br><span class="line">ws2= 2.7528e+003</span><br></pre></td></tr></table></figure></p><h5 id="模拟滤波器的设计"><a href="#模拟滤波器的设计" class="headerlink" title="模拟滤波器的设计"></a><strong>模拟滤波器的设计</strong></h5><p>其程序为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%设计模拟滤波器</span><br><span class="line">［N，Wn］ = buttord（wp2，ws2，Rp，Rs，‘s’）</span><br><span class="line">［z，p，k］=buttap（N）; %创建Buttord低通滤波器原型</span><br><span class="line">［Bap，Aap］=zp2tf（z，p，k）; %由零极点转换为传递函数的形式</span><br><span class="line">figure（1） freqs（Bap，Aap）; %模拟低通滤波器的频率响应</span><br><span class="line">TItle（‘模拟滤波器（低通原型）的频率响应’）</span><br><span class="line">［Bbs，Abs］=lp2hp（Bap，Aap，Wn）; %模拟低通变高通</span><br><span class="line">figure（2）</span><br><span class="line">freqs（Bbs，Abs）;</span><br><span class="line">TItle（‘模拟滤波器的频率响应’）</span><br></pre></td></tr></table></figure></p><p>程序执行后可以发现其频率响应为： N=4，其波形如下图<br><img src="/images/巴特沃斯滤波器6.png" alt=""><br>模拟滤波器的频率响应<br>由上图分析可得：其符合高通的一般特征，与预期的效果一样。 而在此条件下，Butterworth滤波器低通原型的波形如下图。<br><img src="/images/巴特沃斯滤波器7.png" alt=""><br>模拟滤波器（低通原型）的频率响应<br>在设计的过程中，涉及一个频率变换的问题，即将模拟低通原型变为高通，其函数及用法如下：<br>［b，a］=lp2hp（Bap，Aap，Wn）;<br>功能：把模拟滤波器原型转换成截至频率为 Wn 的高通滤波器。 其中，Bap，Aap分别为低通传递函数的分子向量和分母向量；<br>b，a分别为高通传递函数的分子向量和分母向量。</p><h5 id="模拟滤波器变成数字滤波器"><a href="#模拟滤波器变成数字滤波器" class="headerlink" title="模拟滤波器变成数字滤波器"></a><strong>模拟滤波器变成数字滤波器</strong></h5><p>其程序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">［Bbz，Abz］=bilinear（Bbs，Abs，FS）; %用双线性变换法设计数字滤波器 freqz（Bbz，Abz，512，FS）;</span><br></pre></td></tr></table></figure></p><p>程序运行的结果为：如下图<br><img src="/images/巴特沃斯滤波器8.png" alt=""><br>数字滤波器的频率响应<br>由于使用的是双线性不变法设计的，其相位为非线性。此处主要是基于要获得严格的频率响应，以及较准确地控制截止频率的位置，故画出了详细的幅频响应。（如下图）<br><img src="/images/巴特沃斯滤波器9.png" alt=""><br>详细的幅频响应<br>分析该图可知其在0.6（即300Hz）处的衰减为40dB，而在0.8（即400Hz）处的衰减极小，应小于1dB。由此可见，此设计符合要求设计的参数。<br>而在调试的过程中发现：通带衰减越小，滤波器的性能越好 阻带衰减越大，滤波器的性能越好 其曲线也越陡峭，选择性越好，当然所用的滤波器阶数也越高。<br>当阻带衰减变为40dB（之前为20dB），通带不变时，其波形如下图。对比上图可知，其在阻带临界频率处衰减变为了40dB，曲线变陡峭了。<br><img src="/images/巴特沃斯滤波器10.png" alt=""><br>详细的幅频响应（阻带衰减为40dB）<br>当通带变为5dB时，阻带不变时，其波形如下图。对比图3-3可知，其在通带处的衰减变为了5dB，曲线平滑了一些。<br><img src="/images/巴特沃斯滤波器11.png" alt=""><br>详细的幅频响应（通带衰减为5dB）</p><h5 id="理论计算数字滤波器的仿真"><a href="#理论计算数字滤波器的仿真" class="headerlink" title="理论计算数字滤波器的仿真"></a><strong>理论计算数字滤波器的仿真</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wp=0.8*pi;</span><br><span class="line">ws=0.6*pi;</span><br><span class="line">OmegaP=2*1000*tan（wp/2）;</span><br><span class="line">OmegaS=2*1000*tan（ws/2）;</span><br><span class="line">lamdas=OmegaP/OmegaS;</span><br><span class="line">N=0.5*log10（（10.^（20/10）-1）/（10.^（1/10）-1））/log10（lamdas）;</span><br><span class="line">%笔算的结果为N=3.6947；故取N=4 %</span><br><span class="line">此处为计算高通的传递函数 Wn= 4.8890e+003 az=［0 0 0 0 1］;</span><br><span class="line">bz=［1 2.613 3.414，2.613，1］; ［Bbs，Abs］=lp2hp（az，bz，Wn） %用双线性不变法处理</span><br><span class="line">［Bbz，Abz］=bilinear（Bbs，Abs，1000）; 其运行结果为：N=3.6947；图形如下图</span><br><span class="line">![](/images/巴特沃斯滤波器12.png)</span><br></pre></td></tr></table></figure><h5 id="理论计算的滤波器的幅频响应"><a href="#理论计算的滤波器的幅频响应" class="headerlink" title="理论计算的滤波器的幅频响应"></a><strong>理论计算的滤波器的幅频响应</strong></h5><p>综上所述，本滤波器以四阶即实现了预期的设计目标：采样频率为1000Hz，通带临界频率fp =400Hz，通带内衰减小于1dB（αp=1）；阻带临界频率fs=300Hz，阻带内衰减大于20dB（αs=25），其在通带内的性能更好。</p><h3 id="MATLAB应用"><a href="#MATLAB应用" class="headerlink" title="MATLAB应用"></a><strong>MATLAB应用</strong></h3><p>滤波器设计目标：设计一个1Hz截止频率的2阶低通巴特沃斯数字滤波器，并转化成C语言函数。（国标里提的要求）<br>滤波器指标：指标：截止频率Fc = 1Hz，阶数N=2，低通巴特沃斯滤波器，采样频率Fs = 15Hz。</p><h5 id="一、Matlab计算滤波器系数"><a href="#一、Matlab计算滤波器系数" class="headerlink" title="一、Matlab计算滤波器系数"></a><strong>一、Matlab计算滤波器系数</strong></h5><p>Matlab计算巴特沃斯低通滤波器系数过程如下：<br>①根据给定的通带截止频率、通带截止增益、阻带截止频率、阻带截止增益，利用buttord函数计算巴特沃斯滤波器所需的最小阶数和截止频率。<br>②根据上述计算得到的阶数，利用buttap函数计算出巴特沃斯滤波器原型。<br>③利用lp2lp函数，将原型滤波器转换成目标截止频率的滤波器。<br>④利用脉冲响应不变法（impinvar函数）或是双线性变换法（bilinear函数）将模拟滤波器转换为数字滤波器。数字滤波器形式为z域有理函数，分子分母系数即为滤波器系数。<br>我这里选用的是脉冲响应不变法，因为计算得到的滤波器比较简单，运算速度比较快。<br>（从左到右：滤波器原型、模拟滤波器、数字滤波器）<br>设计过程matlab源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Fs = 15;        %采样频率</span><br><span class="line">Nn = 12800;</span><br><span class="line">N = 2;          %阶数</span><br><span class="line">Wc = 1*2*pi;    %截止频率</span><br><span class="line">[z,p,k] = buttap(N);  %计算巴特沃斯滤波器原型</span><br><span class="line">[Bap,Aap] = zp2tf(z,p,k);  %转换成多项式模式</span><br><span class="line">[b,a] = lp2lp(Bap,Aap,Wc);  %根据截止频率计算模拟巴特沃斯滤波器系数</span><br><span class="line">[bz,az] = impinvar(b,a,Fs);  %用脉冲响应不变法离散化</span><br><span class="line">figure(1)</span><br><span class="line">[H,W] = freqz(bz,az,Nn,Fs);  %绘制频率特性曲线</span><br><span class="line">subplot(2,1,1)</span><br><span class="line">plot(W,20*log10(abs(H)));</span><br><span class="line">grid on;</span><br><span class="line">subplot(2,1,2)</span><br><span class="line">plot(W,180/pi*unwrap(angle(H)));</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure></p><p>二、Matlab计算验证<br>先在Matlab中验证滤波函数。先编写带噪声的输入函数，然后经过滤波器函数后，观察滤波效果。其中滤波器函数写法为：</p><p>Filter函数为Matlab自带函数，其算法为：</p><p>其中，a即为z域传递函数的分母系数，b为分子系数。例如本应用中：</p><p>则算法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az(1)*y(k) = bz(1)*x(k) + bz(2)*x(k-1) – az(2)*y(k-1) – az(3)*y(k-2)</span><br></pre></td></tr></table></figure></p><p> Matlab中得到的结果如下（信号频率0.1Hz，噪声频率6Hz）：</p><p>三、C语言函数编写与验证<br>将上述算法翻译成C语言，写入单片机中。利用信号源输出各种波形，单片机AD采样进去之后，对采样点进行滤波处理，将原始数据和滤波后的数据发送到上位机进行绘图，得到图像对比如下：</p><p>C函数源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const float bz[2] = &#123;0,0.128580115806658&#125;;  //分子</span><br><span class="line">const float az[3] = &#123;1,-1.42252474659021,0.553007125840971&#125;;  //分母</span><br><span class="line">float Data_Output[DATA_LENTH];  //输出数据</span><br><span class="line">float* but_filter(unsigned int len, float* x)  //len为输入数据数组长度，x为输入数据数组指针</span><br><span class="line">&#123;unsigned int i = 2;static float init[2] = &#123;0,0&#125;;  //初值，一开始设为0</span><br><span class="line">  if(len&lt;2)                   //如果长度小于2，直接返回return Data_Output;Data_Output[0] = init[0];   //赋初值Data_Output[1] = init[1];for(i = 2;i &lt; len;i++)&#123;Data_Output[i] = bz[0]*x[i] + bz[1]*x[i-1] - az[1]*Data_Output[i-1] - az[2]*Data_Output[i-2];/*算法为a1*y(k) = b1*x(k) + b2*x(k-1) - a(2)*y(k-1) - a(3)*y(k-2)*//*由于a1 = 1，故不做除法*/&#125;init[0] = Data_Output[len-2];  //考虑到会被连续调用，此次的终值作为下次的初值init[1] = Data_Output[len-1];return Data_Output; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the sixth passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DCDC</title>
    <link href="http://qinzhengchao.github.io/2019/03/29/DCDC/"/>
    <id>http://qinzhengchao.github.io/2019/03/29/DCDC/</id>
    <published>2019-03-29T10:04:58.000Z</published>
    <updated>2019-03-29T10:16:15.753Z</updated>
    
    <content type="html"><![CDATA[<p>this is the fifth passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="DCDC电路"><a href="#DCDC电路" class="headerlink" title="DCDC电路"></a><strong>DCDC电路</strong></h1><h3 id="1基本内容"><a href="#1基本内容" class="headerlink" title="1基本内容"></a><strong>1基本内容</strong></h3><p>DC/DC，表示的是高压（低压）直流电源变换为低压（高压）直流电源。例如车载直流电源上接的DC/DC变换器是把高压的直流电变换为低压的直流电。具体是指通过自激振荡电路把输入的直流电转变为交流电，再通过变压器改变电压之后再转换为直流电输出，或者通过倍压整流电路将交流电转换为高压直流电输出。</p><h3 id="2-DCDC变换器轻载时三种工作模式"><a href="#2-DCDC变换器轻载时三种工作模式" class="headerlink" title="2 DCDC变换器轻载时三种工作模式"></a><strong>2 DCDC变换器轻载时三种工作模式</strong></h3><h5 id="跳脉冲模式"><a href="#跳脉冲模式" class="headerlink" title="跳脉冲模式"></a>跳脉冲模式</h5><p>　　对于恒定频率的常规的非同步Buck控制器，通常电感的电流工作于CCM连续电流模式，电感的平均电流即为输出的负载电流。当负载电流降低时，电感的平均电流也将降低；当负载电流降低时一定值，变换器进入临界电流模式。此时，若负载电流进一步的降低，电感的电流回到0后，开关周期还没有结束，由于二极管的反向阻断作用，电感的电流在0值处保持一段时间，然后开关周期结束，进入下一个开在周期，此时变换器为完全的非连续电流模式。<br>　　变换器进入非连续电流模式后，若负载电流仍然进一步的降低，为了维持输出电压的调节，高端的开关管的开通时间将减小，直到达到控制器的最小导通时间。高端的开关管的开通时间达到控制器的最小导通时间后，若负载电流仍然的降低，控制器就必须屏蔽掉即跳掉一些开关脉冲，以维持输出电压的调节。这种控制方法即为跳脉冲模式。<br>　　同步的Buck变换器检测下管的电流，当下管的电流接近于0时，系统就工作在非同步的方式，也就是下管不工作，依靠下管内部寄生的反并联二极管，提供续流回路。<br>　　跳脉冲模式可以在最宽的输入电流范围内提供恒定频率的不连续电流操作，防止反向电感器的电流。由于控制器允许调节器跳掉一些不需要的脉冲，相比于连续模式操作，提高轻载的效率，但其轻载的工作效率不如突发模式操作，其轻载的输出纹波不如连续模式操作。跳脉冲模式的确提供了一种工作效率和噪声的折衷方案。</p><h5 id="突发工作模式"><a href="#突发工作模式" class="headerlink" title="突发工作模式"></a>突发工作模式</h5><p>　　Buck突发模式的原理图见图2所示。VFB为输出电压反馈脚，VEA为电压误差放大器，VREF为参考电压，突发工作模式比较器上限电压和下限电压为VH和VL，通过检测ITH管脚电压VC来检测输出负载的变化。<br>　　正常工作时，系统不会进入突发工作模式，突发工作模式比较器不工作，当输出负载降低时，输出电压将提高，VFB相应的也提高，由于VEA为负反馈，因此VC随之降低。当输出负载降低到一定的值时，系统进入到轻载模式后，突发工作模式比较器开始工作，接管对ITH管脚电压VC的控制，突发工作模式比较器的输出信号使控制电路将高端MOSFET的输出驱动关断，高端MOSFET停止开关操作，此时输入不再向输出端传输能量，输出的大电容将维持低的输出负载，因此输出电压慢慢的降低，VFB相应的也降低，VC随之提高。<br>　　输出电压继续的降低，VFB的电压相应的也继续的降低，VC随之继续提高。经过一段长的时间后，VC电压将增加到等于VH，突发工作模式比较器输出信号翻转，控制电路使能高端MOSFET的驱动输出信号，高端MOSFET进入开关操作，系统进入正常的PWM操作，由于输入的能量大于输出负载所消耗的能量，因此输出电压将随之提高。<br>　　当输出电压提高到一定值时，VC电压降低，VC电压降低到VL时L，突发工作模式比较器输出又一次的翻转，重新关断高端MOSFET的驱动信号，系统再一次停止工作。如此反复，这种工作模式即为突发工作模式。<br>　　突发模式比较器控制高端开关管工作，高端开关管工作的时间很短，停止工作的时间很长，极大的降低了开关损耗，在此期间，芯片内部的许多功能停止工作，减小内部静态电流的消耗，因此提高系统的效率。<br>　　另一方面由于高端开关管停止工作的时间很长，输出电容将维持输出的负载的能量，输出电容的电压降低幅度较大，因此输出电容的纹波电压大，即输出的纹波电压大。突发工作模式比较器的上下门限电压决定了输出电压纹波值。<br>　　这种模式和滞回电压模式有点类似，但不同的是，这种模式通过内部的检测确定输出负载的变化，从而决定系统是否进入轻载的突发模式。在突发模式中，比较器输出信号翻转系统进入正常工作时，系统为正常的定频PWM工作，高端MOSFET进入正常的PWM工作，此时系统工作在连续PWM模式或断续与连续PWM并存的模式，能量很快的向输出传送，只要工作几个周期后便停止工作。</p><h5 id="强迫连续模式"><a href="#强迫连续模式" class="headerlink" title="强迫连续模式"></a>强迫连续模式</h5><p>　　强迫连续模式主要针对于同步Buck变换器，在正常工作时，强迫连续模式和跳脉冲模式一样都工作于CCM模式。当输出负载降低并降低到一定的值时，如前所述，跳脉冲模式将由CCM进入DCM模式，在电感的电流为0时续流二极管将自然关断并维持关断的状态直到进入下一个开在周期。<br>　　对于强迫连续模式，在电感的电流为0，由于同步开关管仍然导通，因此输出的电容电压将反向加在电感上从而对电感反向激磁，电感的电流将从0反向增加到一定值，然后同步管关断，主开关管导通，输入电压加在电感上，电感两端的电压为正电压，电感的电流将从一定负值正向增加，在过0后继续正向增加到一定值，这也是所谓的输出电流倒灌现象。<br>　　主开关管和同步开关管在每个开关周期都在工作，因此开关的功耗大，系统的效率极低。低输出负载条件下，在每个开关周期，高端的主开关导通时，从输入端向输出负载传输的能量大于实际负载所需要的能量，因此必须依靠同步开关管的导通，使输出电压对电感反向激磁，从而将多余部分的能量储存在电感中，以维持输出的调节。这部分的能量只是在电感中来回的交换，并没有消耗在实际的负载中。由于电感有磁损耗（磁芯中的功率损耗）和铜损耗（导线电阻的损耗）能量，因此也进一步的降低的效率。然而也正是因为主开关管和同步开关管在每个开关周期都在工作，即使在轻负载的条件下，在每个开关周期，输入和输出的能量能够得到平移，因此输出电压的纹波也最小。<br>　　这种效率最低的操作模式适合于一些特定的应用。在该模式中，输出可以供电流也可以吸收电流，因此可以应用于DDR存储器的供电。另外，在一些通讯系统中，即使是在轻负载的条件下仍然需要低的输出电压纹波，因此也必须使用此种工作模式，而效率并不是主要的考虑因素。输出纹波电压和频率在整个负载变化范围内恒定，容易滤除噪声，适合于通讯等要求干扰噪声低的应用。在强制连续模式操作中输出电流倒灌，然后处于开关管死区时间，电感的电流对输入电容充电，其电压提升，设计时要校核实际的输入电压最大值，使其小于相关元件的额定值。[2]</p><h3 id="三-工作原理："><a href="#三-工作原理：" class="headerlink" title="三.工作原理："></a><strong>三.工作原理：</strong></h3><p>Dcdc电路：<br>DC-DC是英语直流变直流的缩写，所以DC-DC电路是某直流电源转变为不同电压值的电路。DC-DC是开关电源技术的一个分支，开关电源技术包括AC-DC、DC-DC两ff个分支。DC-DC电路按功能分为：</p><p>升压变换器：将低电压变换为高电压的电路。<br>降压变换器：将高电压变换为低电压的电路。<br>反向器：将电压极性改变的电路，有正电源变负电源，负电源变正电源两类。<br>三个主要分支，当然应用时在同一电路中会有升压反向、降压升压等功能同时存在。</p><p>DC-DC变换器的基本电路有升压变换器、降压变换器、升降压变换器三种。<br>dcdc电路原理：<br>降压变换器原理图如图1所示，当开关闭合时，加在电感两端的电压为（Vi-Vo），此时电感由电压（Vi-Vo）励磁，电感增加的磁通为：（Vi-Vo）*Ton。</p><p>当开关断开时，由于输出电流的连续，二极管VD变为导通，电感削磁，电感减少的磁通为：（Vo）<em>Toff。<br>当开关闭合与开关断开的状态达到平衡时，（Vi-Vo）</em>Ton=（Vo）<em>Toff，由于占空比D&lt;1，所以Vi&gt;Vo，实现降压功能。<br>图当开关闭合与开关断开的状态达到平衡时，（Vi-Vo）</em>Ton=（Vo）<em>Toff，由于占空比D&lt;1，所以Vi&gt;Vo，实现降压功能。<br><img src="/images/DCDC1.png" alt=""><br>升压变换器原理图如图2所示，当开关闭合时，输入电压加在电感上，此时电感由电压（Vi）励磁，电感增加的磁通为：（Vi）</em>Ton。<br>当开关断开时，由于输出电流的连续，二极管VD变为导通，电感削磁，电感减少的磁通为：（Vo- Vi）<em>Toff。<br>当开关闭合与开关断开的状态达到平衡时，（Vi）</em>Ton=（Vo- Vi）<em>Toff，由于占空比D&lt;1，所以Vi&lt;Vo，实现升压功能。<br><img src="/images/DCDC2.png" alt=""><br>升降压变换器、入出极性相反原理如图3,当开关闭合时，此时电感由电压（Vi）励磁，电感增加的磁通为：（Vi）</em>Ton；当开关断开时，电感削磁，电感减少的磁通为：（Vo）<em>Toff。当开关闭合与开关断开的状态达到平衡时，增加的磁通等于减少的磁通，（Vi）</em>Ton=（Vo）*Toff，根据Ton比Toff值不同，可能Vi&lt; Vo，也可能Vi&gt;Vo。<br><img src="/images/DCDC3.png" alt=""><br>综上，可通过DCDC外部电感和二极管的接法来判断DCDC的类型：<br>1&gt;若二极管负向接SW，正向接地，且电感接SW和负载之间。则为降压DCDC。<br>2&gt;若电感接电源和SW之间，二极管正向接SW，负向接负载。则为升压DCDC。<br>3&gt;若电感接SW和地之间，二极管负向接SW，正向接负载。则为升降压DCDC。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the fifth passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MOS管选型</title>
    <link href="http://qinzhengchao.github.io/2019/03/15/MOS%E7%AE%A1%E9%80%89%E5%9E%8B/"/>
    <id>http://qinzhengchao.github.io/2019/03/15/MOS管选型/</id>
    <published>2019-03-15T13:20:21.000Z</published>
    <updated>2019-03-15T13:43:09.165Z</updated>
    
    <content type="html"><![CDATA[<p>this is the fourth passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="MOS管选型技巧"><a href="#MOS管选型技巧" class="headerlink" title="MOS管选型技巧"></a><strong>MOS管选型技巧</strong></h1><h5 id="注：本篇博客可能会与上一篇博客有部分重复，但是这篇博客更细致的叙述了MOS管的选型，一共分为以下七个步骤"><a href="#注：本篇博客可能会与上一篇博客有部分重复，但是这篇博客更细致的叙述了MOS管的选型，一共分为以下七个步骤" class="headerlink" title="注：本篇博客可能会与上一篇博客有部分重复，但是这篇博客更细致的叙述了MOS管的选型，一共分为以下七个步骤"></a>注：本篇博客可能会与上一篇博客有部分重复，但是这篇博客更细致的叙述了MOS管的选型，一共分为以下七个步骤</h5><p>选择到一款正确的MOS管，可以很好地控制生产制造成本，最为重要的是，为产品匹配了一款最恰当的元器件，这在产品未来的使用过程中，将会充分发挥其“螺丝钉”的作用，确保设备得到最高效、最稳定、最持久的应用效果。</p><h3 id="第一步确定N、P沟道的选择："><a href="#第一步确定N、P沟道的选择：" class="headerlink" title="第一步确定N、P沟道的选择："></a><strong>第一步确定N、P沟道的选择：</strong></h3><p>MOS管有两种结构形式，即N沟道型和P沟道型，结构不一样，使用的电压极性也会不一样，因此，在确定选择哪种产品前，首先需要确定采用N沟道还是P沟道MOS管。<br><img src="/images/MOS管选型1.jpg" alt=""><br>MOS管的两种结构：N沟道型和P沟道型</p><p>在典型的功率应用中，当一个MOS管接地，而负载连接到干线电压上时，该MOS管就构成了低压侧开关。在低压侧开关中，应采用N沟道MOS管，这是出于对关闭或导通器件所需电压的考虑。</p><p>当MOS管连接到总线及负载接地时，就要用高压侧开关。通常会在这个拓扑中采用P沟道MOS管，这也是出于对电压驱动的考虑。</p><p>要选择适合应用的器件，必须确定驱动器件所需的电压，以及在设计中最简易执行的方法。</p><h3 id="第二步确定电压："><a href="#第二步确定电压：" class="headerlink" title="第二步确定电压："></a><strong>第二步确定电压：</strong></h3><p>额定电压越大，器件的成本就越高。从成本角度考虑，还需要确定所需的额定电压，即器件所能承受的最大电压。根据实践经验，额定电压应当大于干线电压或总线电压，一般会留出1.2~1.5倍的电压余量，这样才能提供足够的保护，使MOS管不会失效。</p><p>就选择MOS管而言，必须确定漏极至源极间可能承受的最大电压，即最大VDS。由于MOS管所能承受的最大电压会随温度变化而变化，设计人员必须在整个工作温度范围内测试电压的变化范围。额定电压必须有足够的余量覆盖这个变化范围，确保电路不会失效。</p><p>此外，设计工程师还需要考虑其他安全因素：如由开关电子设备(常见有电机或变压器)诱发的电压瞬变。另外，不同应用的额定电压也有所不同；通常便携式设备选用20V的MOS管，FPGA电源为20～30V的MOS管，85～220V AC应用时MOS管VDS为450～600V。</p><h3 id="第三步确定电流："><a href="#第三步确定电流：" class="headerlink" title="第三步确定电流："></a><strong>第三步确定电流：</strong></h3><p>确定完电压后，接下来要确定的就是MOS管的电流。需根据电路结构来决定，MOS管的额定电流应是负载在所有情况下都能够承受的最大电流；与电压的情况相似，MOS管的额定电流必须能满足系统产生尖峰电流时的需求。电流的确定需从两个方面着手：连续模式和脉冲尖峰。在连续导通模式下，MOS管处于稳态，此时电流连续通过器件。脉冲尖峰是指有大量电涌(或尖峰电流)流过器件。一旦确定了这些条件下的最大电流，只需直接选择能承受这个最大电流的器件便可。</p><p>选好额定电流后，还必须计算导通损耗。在实际情况下，MOS管并不是理想的器件，因为在导电过程中会有电能损耗，也就是导通损耗。MOS管在“导通”时就像一个可变电阻，由器件的导通电阻RDS(ON)所确定，并随温度而显著变化。器件的功率损耗PTRON=Iload2×RDS(ON)计算（Iload：最大直流输出电流），由于导通电阻会随温度变化，因此功率耗损也会随之按比例变化。对MOS管施加的电压VGS越高，RDS(ON)就会越小；反之RDS(ON)就会越高。</p><p>对系统设计人员来说，这就需要折中权衡。对便携式设计来说，采用较低的电压即可(较为普遍)；而对于工业设计来说，可采用较高的电压。需要注意的是，RDS(ON)电阻会随着电流轻微上升。</p><p>技术对器件的特性有着重大影响，因为有些技术在提高最大VDS（漏源额定电压）时往往会使RDS(ON)增大。对于这样的技术，如果打算降低VDS和RDS(ON)，那么就得增加晶片尺寸，从而增加与之配套的封装尺寸及相关的开发成本。业界现有好几种试图控制晶片尺寸增加的技术，其中最主要的是沟道和电荷平衡技术。</p><h3 id="第四步确定热要求："><a href="#第四步确定热要求：" class="headerlink" title="第四步确定热要求："></a><strong>第四步确定热要求：</strong></h3><p>在确定电流之后，就要计算系统的散热要求。设计人员必须考虑两种不同的情况：最坏情况和真实情况。建议采用针对最坏情况的计算结果，因为这个结果提供更大的安全余量，能确保系统不会失效。在MOS管的资料表上还有一些需要注意的测量数据，比如封装器件的半导体结与环境之间的热阻，以及最大的结温。</p><p>器件的结温等于最大环境温度加上热阻与功率耗散的乘积，即结温=最大环境温度+（热阻×功率耗散）。根据这个方程可解出系统的最大功率耗散=I2×RDS(ON)。</p><p>由于设计人员已确定将要通过器件的最大电流，因此可以计算出不同温度下的RDS(ON)。值得注意的是，在处理简单热模型时，设计人员还必须考虑半导体结/器件外壳及外壳/环境的热容量；即要求印刷电路板和封装不会立即升温。</p><p>雪崩击穿（指半导体器件上的反向电压超过最大值，并形成强电场使器件内电流增加）形成的电流将耗散功率，使器件温度升高，而且有可能损坏器件。半导体公司都会对器件进行雪崩测试，计算其雪崩电压，或对器件的稳健性进行测试。</p><p>计算额定雪崩电压有两种方法；一是统计法，另一是热计算。而热计算因为较为实用而得到广泛采用。除计算外，技术对雪崩效应也有很大影响。例如，晶片尺寸的增加会提高抗雪崩能力，最终提高器件的稳健性。对最终用户而言，这意味着要在系统中采用更大的封装件。</p><h3 id="第五步确定开关性能："><a href="#第五步确定开关性能：" class="headerlink" title="第五步确定开关性能："></a><strong>第五步确定开关性能：</strong></h3><p>选择MOS管的最后一步是确定其开关性能。影响开关性能的参数有很多，但最重要的是栅极/漏极、栅极/源极及漏极/源极电容。因为在每次开关时都要对这些电容充电，会在器件中产生开关损耗；MOS管的开关速度也因此被降低，器件效率随之下降；其中，栅极电荷(Qgd)对开关性能的影响最大。</p><p>为计算开关过程中器件的总损耗，设计人员必须计算开通过程中的损耗(Eon)和关闭过程中的损耗(Eoff)，进而推导出MOS管开关总功率：Psw=(Eon+Eoff)×开关频率。</p><p>下图为增强型NMOS管构成的开关电路<br><img src="/images/MOS管选型2.jpg" alt=""></p><h3 id="第六步封装因素考量："><a href="#第六步封装因素考量：" class="headerlink" title="第六步封装因素考量："></a><strong>第六步封装因素考量：</strong></h3><p>不同的封装尺寸MOS管具有不同的热阻和耗散功率，需要考虑系统的散热条件和环境温度（如是否有风冷、散热器的形状和大小限制、环境是否封闭等因素），基本原则就是在保证功率MOS管的温升和系统效率的前提下，选取参数和封装更通用的功率MOS管。</p><h5 id="常见的MOS管封装有："><a href="#常见的MOS管封装有：" class="headerlink" title="常见的MOS管封装有："></a><strong>常见的MOS管封装有：</strong></h5><p>①插入式封装：TO-3P、TO-247、TO-220、TO-220F、TO-251、TO-92；</p><p>②表面贴装式：TO-263、TO-252、SOP-8、SOT-23、DFN5<em>6、DFN3</em>3；<br>下图为TO封装MOS管<br><img src="/images/TO封装MOS管.jpg" alt=""><br>不同的封装形式，MOS管对应的极限电流、电压和散热效果都会不一样，简单介绍如下。</p><p>TO-3P/247：是中高压、大电流MOS管常用的封装形式，产品具有耐压高、抗击穿能力强等特点，适于中压大电流（电流10A以上、耐压值在100V以下）在120A以上、耐压值200V以上的场所中使用。<br>TO-220/220F：这两种封装样式的MOS管外观差不多，可以互换使用，不过TO-220背部有散热片，其散热效果比TO-220F要好些，价格相对也要贵些。这两个封装产品适于中压大电流120A以下、高压大电流20A以下的场合应用。<br>TO-251：该封装产品主要是为了降低成本和缩小产品体积，主要应用于中压大电流60A以下、高压7N以下环境中。<br>TO-92：该封装只有低压MOS管（电流10A以下、耐压值60V以下）和高压1N60/65在采用，主要是为了降低成本。<br>TO-263：是TO-220的一个变种，主要是为了提高生产效率和散热而设计，支持极高的电流和电压，在150A以下、30V以上的中压大电流MOS管中较为多见。<br>TO-252：是目前主流封装之一，适用于高压在7N以下、中压在70A以下环境中。<br>SOP-8：该封装同样是为降低成本而设计，一般在50A以下的中压、60V左右的低压MOS管中较为多见。<br>SOT-23：适于几A电流、60V及以下电压环境中采用，其又分有大体积和小体积两种，主要区别在于电流值不同。</p><h3 id="第七步要选择好品牌："><a href="#第七步要选择好品牌：" class="headerlink" title="第七步要选择好品牌："></a><strong>第七步要选择好品牌：</strong></h3><p>MOS管的生产企业很多，大致说来，主要有欧美系、日系、韩系、台系、国产几大系列。<br>欧美系代表企业：IR、ST、仙童、安森美、TI、PI、英飞凌等；<br>日系代表企业：东芝、瑞萨、新电元等；<br>韩系代表企业：KEC、AUK、美格纳、森名浩、威士顿、信安等；<br>台系代表企业：APEC、CET；<br>国产代表企业：吉林华微、士兰微、华润华晶、东光微、深爱半导体等。<br>在这些品牌中，以欧美系企业的产品种类最全、技术及性能最优，从性能效果考虑，是为MOS管的首选；以瑞萨、东芝为代表的日系企业也是MOS管的高端品牌，同样具有很强的竞争优势；这些品牌也是市面上被仿冒最多的。另外，由于品牌价值、技术优势等原因，欧美系和日系品牌企业的产品价格也往往较高。韩国和中国台湾的MOS管企业也是行业的重要产品供应商，不过在技术上，要稍弱于欧美及日系企业，但在价格方面，较欧美及日系企业更具优势；性价比相对高很多。而在中国大陆，同样活跃着一批本土企业，他们借助更低的成本优势和更快的客户服务响应速度，在中低端及细分领域具有很强的竞争力，部分实现了国产替代；目前也在不断冲击高端产品线，以满足本土客户的需求。另外，本土企业还通过资本运作，成功收购了安世半导体等国际知名的功率器件公司，将更好地满足本土对功率器件的需求。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>小到选N型还是P型、封装类型，大到MOSFET的耐压、导通电阻等，不同的应用需求千变万化，工程师在选择MOS管时，一定要依据电路设计需求及MOS管工作场所来选取合适的MOS管，从而获得最佳的产品设计体验。当然，在考虑性能的同时，成本也是选择的因素之一，只有高性价比的产品，才能让工程师设计的产品在品质与收益中达到平衡<br>下图为MOS管选型表<br><img src="/images/MOS管选型表.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the fourth passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>电机驱动</title>
    <link href="http://qinzhengchao.github.io/2019/03/06/%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8/"/>
    <id>http://qinzhengchao.github.io/2019/03/06/电机驱动/</id>
    <published>2019-03-06T14:26:55.000Z</published>
    <updated>2019-03-09T07:28:08.277Z</updated>
    
    <content type="html"><![CDATA[<p>this is the third passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="电机驱动相关资料"><a href="#电机驱动相关资料" class="headerlink" title="电机驱动相关资料"></a><strong>电机驱动相关资料</strong></h1><h3 id="电机驱动MOS管的选型："><a href="#电机驱动MOS管的选型：" class="headerlink" title="电机驱动MOS管的选型："></a><strong>电机驱动MOS管的选型：</strong></h3><p>正确选择MOS管是很重要的一个环节，MOS管选择不好有可能影响到整个电路的效率和成本。</p><h5 id="第一步：选用N沟道还是P沟道"><a href="#第一步：选用N沟道还是P沟道" class="headerlink" title="第一步：选用N沟道还是P沟道"></a>第一步：选用N沟道还是P沟道</h5><p> 为设计选择正确器件的第一步是决定采用N沟道还是P沟道MOS管。在典型的功率应用中，当一个MOS管接地，而负载连接到干线电压上时，该MOS管就构成了低压侧开关。在低压侧开关中，应采用N沟道MOS管，这是出于对关闭或导通器件所需电压的考虑。当MOS管连接到总线及负载接地时，就要用高压侧开关。通常会在这个拓扑中采用P沟道MOS管，这也是出于对电压驱动的考虑。 要选择适合应用的器件，必须确定驱动器件所需的电压，以及在设计中最简易执行的方法。下一步是确定所需的额定电压，或者器件所能承受的最大电压。额定电压越大，器件的成本就越高。根据实践经验，额定电压应当大于干线电压或总线电压。这样才能提供足够的保护，使MOS管不会失效。就选择MOS管而言，必须确定漏极至源极间可能承受的最大电压，即最大VDS.知道MOS管能承受的最大电压会随温度而变化这点十分重要。设计人员必须在整个工作温度范围内测试电压的变化范围。额定电压必须有足够的余量覆盖这个变化范围，确保电路不会失效。设计工程师需要考虑的其他安全因素包括由开关电子设备（如电机或变压器）诱发的电压瞬变。不同应用的额定电压也有所不同；通常，便携式设备为20V、FPGA电源为20~30V、85~220VAC应用为450~600V.</p><h5 id="第二步：确定额定电流"><a href="#第二步：确定额定电流" class="headerlink" title="第二步：确定额定电流"></a>第二步：确定额定电流</h5><p> 第二步是选择MOS管的额定电流。视电路结构而定，该额定电流应是负载在所有情况下能够承受的最大电流。与电压的情况相似，设计人员必须确保所选的MOS管能承受这个额定电流，即使在系统产生尖峰电流时。两个考虑的电流情况是连续模式和脉冲尖峰。在连续导通模式下，MOS管处于稳态，此时电流连续通过器件。脉冲尖峰是指有大量电涌（或尖峰电流）流过器件。一旦确定了这些条件下的最大电流，只需直接选择能承受这个最大电流的器件便可。 选好额定电流后，还必须计算导通损耗。在实际情况下，MOS管并不是理想的器件，因为在导电过程中会有电能损耗，这称之为导通损耗。MOS管在”导通”时就像一个可变电阻，由器件的RDS（ON）所确定，并随温度而显著变化。器件的功率耗损可由Iload2×RDS（ON）计算，由于导通电阻随温度变化，因此功率耗损也会随之按比例变化。对MOS管施加的电压VGS越高，RDS（ON）就会越小；反之RDS（ON）就会越高。对系统设计人员来说，这就是取决于系统电压而需要折中权衡的地方。对便携式设计来说，采用较低的电压比较容易（较为普遍），而对于工业设计，可采用较高的电压。注意RDS（ON）电阻会随着电流轻微上升。关于RDS（ON）电阻的各种电气参数变化可在制造商提供的技术资料表中查到。 技术对器件的特性有着重大影响，因为有些技术在提高最大VDS时往往会使RDS（ON）增大。对于这样的技术，如果打算降低VDS和RDS（ON），那么就得增加晶片尺寸，从而增加与之配套的封装尺寸及相关的开发成本。业界现有好几种试图控制晶片尺寸增加的技术，其中最主要的是沟道和电荷平衡技术。 在沟道技术中，晶片中嵌入了一个深沟，通常是为低电压预留的，用于降低导通电阻RDS（ON）。为了减少最大VDS对RDS（ON）的影响，开发过程中采用了外延生长柱/蚀刻柱工艺。例如，飞兆半导体开发了称为SupeRFET的技术，针对RDS（ON）的降低而增加了额外的制造步骤。这种对RDS（ON）的关注十分重要，因为当标准MOSFET的击穿电压升高时，RDS（ON）会随之呈指数级增加，并且导致晶片尺寸增大。SuperFET工艺将RDS（ON）与晶片尺寸间的指数关系变成了线性关系。这样，SuperFET器件便可在小晶片尺寸，甚至在击穿电压达到600V的情况下，实现理想的低RDS（ON）。结果是晶片尺寸可减小达35%.而对于最终用户来说，这意味着封装尺寸的大幅减小。</p><h5 id="第三步：确定热要求"><a href="#第三步：确定热要求" class="headerlink" title="第三步：确定热要求"></a>第三步：确定热要求</h5><p> 选择MOS管的下一步是计算系统的散热要求。设计人员必须考虑两种不同的情况，即最坏情况和真实情况。建议采用针对最坏情况的计算结果，因为这个结果提供更大的安全余量，能确保系统不会失效。在MOS管的资料表上还有一些需要注意的测量数据；比如封装器件的半导体结与环境之间的热阻，以及最大的结温。器件的结温等于最大环境温度加上热阻与功率耗散的乘积（结温=最大环境温度+[热阻×功率耗散]）。根据这个方程可解出系统的最大功率耗散，即按定义相等于I2×RDS（ON）。由于设计人员已确定将要通过器件的最大电流，因此可以计算出 不同温度下的RDS（ON）。值得注意的是，在处理简单热模型时，设计人员还必须考虑半导体结/器件外壳及外壳/环境的热容量；即要求印刷电路板和封装不会立即升温。<br>雪崩击穿：是指半导体器件上的反向电压超过最大值，并形成强电场使器件内电流增加。该电流将耗散功率，使器件的温度升高，而且有可能损坏器件。半导体公司都会对器件进行雪崩测试，计算其雪崩电压，或对器件的稳健性进行测试。计算额定雪崩电压有两种方法；一是统计法，另一是热计算。而热计算因为较为实用而得到广泛采用。除计算外，技术对雪崩效应也有很大影响。例如，晶片尺寸的增加会提高抗雪崩能力，最终提高器件的稳健性。对最终用户而言，这意味着要在系统中采用更大的封装件。</p><h5 id="第四步：决定开关性能"><a href="#第四步：决定开关性能" class="headerlink" title="第四步：决定开关性能"></a>第四步：决定开关性能</h5><p> 选择MOS管的最后一步是决定MOS管的开关性能。影响开关性能的参数有很多，但最重要的是栅极/漏极、栅极/ 源极及漏极/源极电容。这些电容会在器件中产生开关损耗，因为在每次开关时都要对它们充电。MOS管的开关速度因此被降低，器件效率也下降。为计算开关过程中器件的总损耗，设计人员必须计算开通过程中的损耗（Eon）和关闭过程中的损耗（Eoff）。MOSFET开关的总功率可用如下方程表达：Psw=（Eon+Eoff）×开关频率。而栅极电荷（Qgd）对开关性能的影响最大。</p><h3 id="续流二极管效果及原理"><a href="#续流二极管效果及原理" class="headerlink" title="续流二极管效果及原理"></a><strong>续流二极管效果及原理</strong></h3><h5 id="1、续流二极管的概述"><a href="#1、续流二极管的概述" class="headerlink" title="1、续流二极管的概述"></a>1、续流二极管的概述</h5><p>续流二极管一般是指反向并联在电感线圈、继电器、可控硅等储能元件两头，在电路中电压或电流呈现骤变时，对电路中其它元件起维护效果的二极管。<br>以电感线圈为例，当线圈中有电流通过时，其两头会有感应电动势发生。当电流消失时，其感应电动势会对电路中的元件发生反向电压。当反向电压高于元件的反向击穿电压时，会把元件如三极管等烧坏。如果在线圈两头反向并联一个二极管(有时分会串接一个电阻)，当流过线圈中的电流消失时，线圈发生的感应电动势就会通过二极管和线圈构成的回路消耗掉，然后保证电路中的其它元件的安全。<br>关于继电器而言，因为继电器的线圈是一个很大的电感，它能以磁场的方式贮存电能，所以当它吸合的时分会存储很多的磁场。当操控继电器的三极管由导通变为到时，线圈就会断电，但此刻线圈里磁场并未当即消失，该磁场将发生反向电动势，其电压可高达1000v，这样的高压很简单击穿如三极管或其它电路元件。如果我们在继电器两头反向并联一个二极管(关于继电器，一般会在续流二极管上串接一个电阻以避免回路电流过高)，因为该二极管的接入正好和反向电动势方向共同，这样就能够把反向电动势以电流的方式消耗掉，然后到达维护其它电路元器件的意图。<br>关于可控硅电路，因为可控硅一般当成一个触点开关来用，如果操控的是大电感负载，一样会发生高压反电动势，其原理和继电器一样。在显示器上相同也会用到续流二极管，一般是用在消磁继电器的线圈上。</p><h5 id="2、续流二极管的作业原理"><a href="#2、续流二极管的作业原理" class="headerlink" title="2、续流二极管的作业原理"></a>2、续流二极管的作业原理</h5><p><img src="/images/续流二极管的典型使用电路.jpg" alt=""><br>上图给出了续流二极管的典型使用电路，其间电阻R视情况决议是否需要。储能元件在VT导通时，电压为上正下负，电流方向从上向下。当VT关断时，储能元件中的电流俄然中止，此刻会发生感应电势，其方向是力求坚持电流不变，即总想坚持储能元件电流方向从上向下。这个感应电势与电源电压迭加后加在VT两头，简单使VT击穿，为此能够加上VD，这样就能够将储能元件发生的感应电势短路掉，然后到达维护VT的意图。我们通常所说的“续流二极管”由于在电路中起到续流的作用而得名，一般选择快速恢复二极管或者肖特基二极管来作为“续流二极管”，它在电路中一般用来保护元件不被感应电压击穿或烧坏，以并联的方式接到产生感应电动势的元件两端，并与其形成回路，使其产生的高电动势在回路以续电流方式消耗，从而起到保护电路中的元件不被损坏的作用。续流二极管经常和储能元件一起使用，防止电压电流突变，提供通路。电感可以经过它给负载提供持续的电流，以免负载电流突变，起到平滑电流的作用。在开关电源中，就能见到一个由二极管和电阻串连起来构成的的续流电路。这个电路与变压器原边并联。当开关管关断时，续流电路可以释放掉变压器线圈中储存的能量，防止感应电压过高，击穿开关管。一般选择快速恢复二极管或者肖特基二极管就可以了，用来把线圈产生的反向电势通过电流的形式消耗掉，可见“续流二极管”并不是一个实质的元件，它只不过在电路中起到的作用称做“续流”。<br><img src="/images/续流二极管工作原理.png" alt=""><br>续流二极管都是并联在线圈的两端，线圈在通过电流时，会在其两端产生感应电动势。当电流消失时，其感应电动势会对电路中的元件产生反向电压。当反向电压高于元件的反向击穿电压时，会使元件如三极管、晶闸管等造成损坏。续流二极管并联在线圈两端，当流过线圈中的电流消失时，线圈产生的感应电动势通过二极管和线圈构成的回路做功而消耗掉，从而保护了电路中的其它元件的安全。 续流二极管在电路中反向并联在继电器或电感线圈的两端，当电感线圈断电时其两端的电动势并不立即消失，此时残余电动势通过一个二极管释放，起这种作用的二极管叫续流二极管。其实还是个二极管只不过它在这起续流作用而已，例如在继电器线圈两端反向接的那个二极管或单向可控硅两端反向接的也都是。为什么要反向接个二极管呢？因为继电器的线圈是一个很大的电感，它能以磁场的形式储存电能，所以当他吸合的时候存储大量的磁场。当控制继电器的三极管由导通变为截断时，线圈断电，但是线圈里有磁场。这时将产生反向电动势，电压可高达1000v以上，很容易击穿三极管或其他电路元件。这是由于二极管的接入正好和反向电动势方向一致，把反向电势通过续流二极管以电流的形式中和掉，从而保护了其他电路元器件，因此它一般是开关速度比较快的二极管，像可控硅电路一样，因为可控硅一般当成一个触点开关来用。如果控制的是大电感负载，一样会产生高压反电动势，原理和继电器一样的。续流二极管在显示器上也用到，一般用在消磁继电器的线圈上。</p><h5 id="3、续流二极管的效果"><a href="#3、续流二极管的效果" class="headerlink" title="3、续流二极管的效果"></a>3、续流二极管的效果</h5><p>续流二极管一般和储能元件一起运用，其效果是避免电路中电压电流的骤变，为反向电动势供给耗电通路。电感线圈能够通过它给负载供给继续的电流，以免负载电流骤变，起到平滑电流的效果！在开关电源中，就能见到一个由二极管和电阻串连起来构成的的续流电路。这个电路与变压器原边并联。当开关管关断时，续流电路能够释放掉变压器线圈中贮存的能量，避免感应电压过高，击穿开关管。 </p><h5 id="4、续流二极管的选型"><a href="#4、续流二极管的选型" class="headerlink" title="4、续流二极管的选型"></a>4、续流二极管的选型</h5><p>一般挑选快速恢复二极管或许肖特基二极管，如FR254、FR255、FR256、FR257、1N5204、1N5205、1N5206、1N5207、1N5208、1N5404、1N5405、5406、5407、5408等。 </p><h5 id="5、续流二极管的使用留意事项"><a href="#5、续流二极管的使用留意事项" class="headerlink" title="5、续流二极管的使用留意事项"></a>5、续流二极管的使用留意事项</h5><p>续流二极管一般使用在开关电源、继电器电路、可控硅电路、IGBT等电路中，其使用十分广泛。在运用时应留意一下几点：<br>(1) 续流二极管是避免直流线圈断电时，发生自感电势形成的高电压对相关元器件形成损害的有效手法<br>(2) 续流二极管的极性不能接错，否则将形成短路事端<br>(3) 续流二极管对直流电压总是反接的，即二极管的负极接直流电的正极点<br>(4) 续流二极管是作业在正导游通状况，并非击穿状况或高速开关状况</p><h3 id="下面是对三款电驱原理图及PCB的比较"><a href="#下面是对三款电驱原理图及PCB的比较" class="headerlink" title="下面是对三款电驱原理图及PCB的比较"></a><strong>下面是对三款电驱原理图及PCB的比较</strong></h3><h5 id="一-假期硬件培训"><a href="#一-假期硬件培训" class="headerlink" title="一.假期硬件培训"></a>一.假期硬件培训</h5><p>下图为原理图<br><img src="/images/硬件培训电驱原理图.png" alt=""><br>下图为PCB<br><img src="/images/硬件培训PCB.png" alt=""></p><h5 id="二-电赛用板"><a href="#二-电赛用板" class="headerlink" title="二.电赛用板"></a>二.电赛用板</h5><p>下图为原理图<br><img src="/images/电赛电驱原理图1.png" alt=""><br><img src="/images/电赛电驱原理图2.png" alt=""></p><h5 id="在此简单说明MC74HC00AD是什么器件，有什么功能"><a href="#在此简单说明MC74HC00AD是什么器件，有什么功能" class="headerlink" title="在此简单说明MC74HC00AD是什么器件，有什么功能"></a>在此简单说明MC74HC00AD是什么器件，有什么功能</h5><p>MC74HC00AD是一个数字电路，MC是安森美公司（摩托罗拉）的代称，74HC00AD是最基本的数字电路。MC74HC00D是2输入端四与非门.CMOS电路,工作电压2V - 6V.贴片式封装。是用来做集成电路元件的。<br>数字电路：<br>　　用数字信号完成对数字量进行算术运算和逻辑运算的电路称为数字电路，或数字系统。由于它具有逻辑运算和逻辑处理功能，所以又称数字逻辑电路。现代的数字电路由半导体工艺制成的若干数字集成器件构造而成。逻辑门是数字逻辑电路的基本单元。存储器是用来存储二进制数据的数字电路。从整体上看，数字电路可以分为组合逻辑电路和时序逻辑电路两大类。<br>PCB<br><img src="/images/电赛电驱PCB.png" alt=""></p><h5 id="三-2018培训电驱"><a href="#三-2018培训电驱" class="headerlink" title="三.2018培训电驱"></a>三.2018培训电驱</h5><p>下图为原理图<br><img src="/images/2018培训电驱.png" alt=""><br>下图为原理图<br><img src="/images/双路电机驱动图.png" alt=""></p><h1 id="电机控制"><a href="#电机控制" class="headerlink" title="电机控制"></a><strong>电机控制</strong></h1><p>电机控制是指，对电机的启动、加速、运转、减速及停止进行的控制。根据不同电机的类型及电机的使用场合有不同的要求及目的。对于电动机，通过电机控制，达到电机快速启动、快速响应、高效率、高转矩输出及高过载能力的目的。</p><h5 id="启动控制"><a href="#启动控制" class="headerlink" title="启动控制"></a>启动控制</h5><p>三相异步电机启动方式包括：全电压直接启动、降压启动、增加转子回路电阻启动。<br>对于降压启动，主要包括：自耦变压器启动、星-三角变化启动、变电压启动。异步电机启动时，转子处于静止状态，其转差率s=1。此时，T型等效电路的转子侧阻值很低，因此启动电流的大小较大，通过降压启动可以降低启动电流。由于异步电机的启动转矩与电压平方成正比，因此对于降压启动需要保证电机具有一定的启动能力。<br>增加转子回路启动的方法适用于绕线式转子、深槽转子及双笼式转子。对于鼠笼式转子无法使用该方法。<br>增加异步电机转子电阻时，电机的最大转矩将不会受到影响，但最大转矩的出现点将发生移动，电机转矩-转差率曲线将沿转差率轴压缩。由于电机曲线关于转差率呈现先上升后下降的趋势，因此电机的启动转矩将增大。但其数值受电机最大转矩的影响。<br>单相异步电机的启动方式包括：电容启动、电阻启动、PTC启动等、罩极启动等。<br>由于感应电机单相绕组在转子静止时，无法产生旋转磁势，因此只有单相绕组的异步电机无法自启动。对此，需要在单相异步电机上安装有于主绕组成90°的辅助绕组。该绕组主要用于电机的启动，当电机启动完成后可以切断该绕组或用于电机的运转。<br>为了使电机产生旋转磁势，就必须使电机绕组在转子静止时能够产生旋转磁势。为此，需要有在空间上互成90°的两个绕组，并通入相位上互差90°的电流。由于电机绕组成感性、因此可以利用电容和电阻使2个绕组互成90°。PTC启动，是使用PTC电阻，当电机运转到一定速度后，电机的温度将升高，此时PTC电阻达到剧里温度，电阻自动切断。<br>同步电机由于转子以同步速旋转，不存在转差率。当转子的速度与同步速相差较大时，将产生失步现象，因此无法自启动。同步电机的启动方式包括：变频启动、异步电机带动启动、线性电机自启动。<br>对于变频启动，通常设定启动电压频率的变化率，当电机运转到额定转速的60至80后，向电机加入额定频率，直接带入同步。异步电机带动启动类似。对于线性电机，其转子结构为永磁体+鼠笼。鼠笼用于启动过程。当电机运转至同步速后，鼠笼不再产生电磁转矩。</p><h5 id="调速控制"><a href="#调速控制" class="headerlink" title="调速控制"></a>调速控制</h5><p>电机调速方法包括：串电阻调速、变频调速、变极调速及矢量控制、直接转矩控制等。<br>串电阻调速主要用于异步电机。调速范围受到电机最大转矩限制。<br>变频调速适用于感应电机。通过调节同步速达到调速的目的。<br>变极调速通过改变电机极数，产生1/2、1/3…的转速。<br>矢量控制技术是由德国学者Blaschke在1971年提出的。通过对电机的励磁绕组和电枢绕组解耦，使控制感应电机与控制直流电机一样。通过分别调节电机励磁与电枢电流的大小，来控制电机的转矩、转速、反电动势等。<br>直接转矩控制由德国学者Depenbrock于1985年提出。它直接控制定子磁链空间矢量和电磁转矩，具有快速响应的能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the third passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>the second passage</title>
    <link href="http://qinzhengchao.github.io/2019/02/27/title/"/>
    <id>http://qinzhengchao.github.io/2019/02/27/title/</id>
    <published>2019-02-27T13:01:39.000Z</published>
    <updated>2019-02-28T05:52:57.489Z</updated>
    
    <content type="html"><![CDATA[<p>this is the second passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a><strong>二极管</strong></h1><h3 id="二极管分类"><a href="#二极管分类" class="headerlink" title="二极管分类"></a><strong>二极管分类</strong></h3><h5 id="二极管分为检波二极管、整流二极管、稳压二极管、开关二极管、肖特基二极管、发光二极管等。"><a href="#二极管分为检波二极管、整流二极管、稳压二极管、开关二极管、肖特基二极管、发光二极管等。" class="headerlink" title="二极管分为检波二极管、整流二极管、稳压二极管、开关二极管、肖特基二极管、发光二极管等。"></a>二极管分为检波二极管、整流二极管、稳压二极管、开关二极管、肖特基二极管、发光二极管等。</h5><h3 id="六类二极管的作用"><a href="#六类二极管的作用" class="headerlink" title="六类二极管的作用"></a><strong>六类二极管的作用</strong></h3><h4 id="1-检波二极管"><a href="#1-检波二极管" class="headerlink" title="1.检波二极管"></a><strong>1.检波二极管</strong></h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>检波二极管是用于把叠加在高频载波上的低频信号检出来的器件，它具有较高的检波效率和良好的频率特性。<br><img src="/images/检波二极管.jpg" alt=""></p><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>检波（也称解调）二极管的作用是利用其单向导电性将高频或中频无线电信号中的低频信号或音频信号取出来。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h5><p>调幅波信号是二极管检波电路的输入，二极管只允许单向导电，，使用的是硅管，则只有电压高于0.7V的部分通过二极管。，二极管的输出端连接了一个电容，电容与电阻配合对二极管输出中的高频信号对地短路，使得输出信号基本上信号包络线。电容和电阻构成的这种电路功能叫做滤波。从输入信号中取出调制信号是检波，以整流电流的大小（100mA）作为界线通常把输出电流小于100mA的叫检波。锗材料点接触型、工作频率可达400MHz，正向压降小，结电容小，检波效率高，频率特性好，为2AP型。类似点触型那样检波用的二极管，除用于一般二极管检波外，还能够用于限幅、削波、调制、混频、开关等电路。也有为调频检波专用的特性一致性好的两只二极管组合件。狭义的检波是指从调幅波的包络提取调制信号的过程。有时把这种检波称为包络检波或幅度检波。调幅波的解调即是从调幅信号中取出调制信号的过程，通常称为检波。调幅波解调方法有二极管包络检波器、同步检波器。不论哪种振幅调制信号，都可采用相乘器和低通滤波器组成的同步检波电路进行解调。，普通调幅信号，它的载波分量被抑制掉，直接非线性器件实现相乘作用，得到所需的解调电压，而不必另加同步信号，通常将这种振幅检波器称为包络检波器。目前应用最广的是二极管包络检波器，而在集成电路中，主要采用三极管射极包络检波器。同步检波，又称相干检波，主要用来解调双边带和单边带调制信号，它有两种实现电路。一种由相乘器和低通滤波器组成，另一种直接采用二极管包络检波。工程中，有一类信号叫做调幅波信号(AM信号)，这是一种用低频信号控制高频信号幅度的特殊信号。把低频信号取出来，的电路，叫做检波电路。使用二极管组成最简单的调幅波检波电路。<br><img src="/images/检波电路.jpg" alt=""><br>如图所示是二极管检波电路。电路中的VD1是检波二极管，C1是高频滤波电容，R1是检波电路的负载电阻，C2是耦合电容。检波电路主要由检波二极管VD1构成。<br>在检波电路中，调幅信号加到检波二极管的正极，这时的检波二极管工作原理与整流电路中的整流二极管工作原理基本一样，利用信号的幅度使检波二极管导通，如图所示是调幅波形展开后的示意图。从展开后的调幅信号波形中可以看出，它是一个交流信号，只是信号的幅度在变化。这一信号加到检波二极管正极，正半周信号使二极管导通，负半周信号使二极管截止，这样相当于整流电路工作一样，在检波二极管负载电阻R1上得到正半周信号的包络，即信号的虚线部分，见图中检波电路输出信号波形(不加高频滤波电容时的输出信号波形)。<br>检波电路输出信号由音频信号、直流成分和高频载波信号三种信号成分组成，详细的电路分析需要根据三种信号情况进行展开。这三种信号中，最重要的是音频信号处理电路的分析和工作原理的理解。</p><h5 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h5><p>应用于半导体收音机、收录机、电视机及通信等设备的小信号电路中，其工作频率较高，处理信号幅度较弱。</p><h4 id="2-整流二极管"><a href="#2-整流二极管" class="headerlink" title="2.整流二极管"></a><strong>2.整流二极管</strong></h4><h5 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h5><p>一种将交流电能转变为直流电能的半导体器件。通常它包含一个PN结，有正极和负极两个端子。<br><img src="/images/整流二极管.jpg" alt=""></p><h5 id="应用：-1"><a href="#应用：-1" class="headerlink" title="应用："></a>应用：</h5><p>整流二极管主要用于各种低频半波整流电路，如需达到全波整流需连成整流桥使用。<br><img src="/images/整流二极管1.jpg" alt=""><br><img src="/images/整流二极管2.jpg" alt=""><br><img src="/images/整流二极管3.jpg" alt=""></p><h5 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h5><p>(1)最大平均整流电流IF:指二极管长期工作时允许通过的最大正向平均电流。该电流由PN结的结面积和散热条件决定。使用时应注意通过二极管的平均电流不能大于此值，并要满足散热条件。例如1N4000系列二极管的IF为1A。<br>(2)最高反向工作电压VR:指二极管两端允许施加的最大反向电压。若大于此值，则反向电流(IR)剧增，二极管的单向导电性被破坏，从而引起反向击穿。通常取反向击穿电压(VB)的一半作为(VR)。例如1N4001的VR为50V，1N4002-1n4006分别为100V、200V、400V、600V和800V，1N4007的VR为1000V<br>(3)最大反向电流IR:它是二极管在最高反向工作电压下允许流过的反向电流，此参数反映了二极管单向导电性能的好坏。因此这个电流值越小，表明二极管质量越好。<br>(4)击穿电压VB:指二极管反向伏安特性曲线急剧弯曲点的电压值。反向为软特性时，则指给定反向漏电流条件下的电压值。<br>(5)最高工作频率fm:它是二极管在正常情况下的最高工作频率。主要由PN结的结电容及扩散电容决定，若工作频率超过fm，则二极管的单向导电性能将不能很好地体现。例如1N4000系列二极管的fm为3kHz。另有快恢复二极管用于频率较高的交流电的整流，如开关电源中。<br>(6)反向恢复时间trr:指在规定的负载、正向电流及最大反向瞬态电压下的反向恢复时间。<br>(7)零偏压电容CO:指二极管两端电压为零时，扩散电容及结电容的容量之和。值得注意的是，由于制造工艺的限制，即使同一型号的二极管其参数的离散性也很大。手册中给出的参数往往是一个范围，若测试条件改变，则相应的参数也会发生变化，例如在25°C时测得1N5200系列硅塑封整流二极管的IR小于10uA，而在100°C时IR则变为小于500uA。</p><h5 id="常用型号："><a href="#常用型号：" class="headerlink" title="常用型号："></a>常用型号：</h5><p>二极管型号，用途，最高反向工作电压VR，最大平均整流电流IF<br>1N4001 硅整流二极管 50V, 1A,(Ir=5uA,Vf=1V,Ifs=50A)<br>1N4002 硅整流二极管 100V, 1A,<br>1N4003 硅整流二极管 200V, 1A,<br>1N4004 硅整流二极管 400V, 1A,<br>1N4005 硅整流二极管 600V, 1A,<br>1N4006 硅整流二极管 800V, 1A,<br>1N4007 硅整流二极管 1000V, 1A,<br>1N4148 硅开关二极管 75V, 4PF,Ir=25nA,Vf=1V,<br>1N5391 硅整流二极管 50V, 1.5A,(Ir=10uA,Vf=1.4V,Ifs=50A)<br>1N5392 硅整流二极管 100V,1.5A,<br>1N5393 硅整流二极管 200V,1.5A,<br>1N5394 硅整流二极管 300V,1.5A,<br>1N5395 硅整流二极管 400V,1.5A,<br>1N5396 硅整流二极管 500V,1.5A,<br>1N5397 硅整流二极管 600V,1.5A,<br>1N5398 硅整流二极管 800V,1.5A,<br>1N5399 硅整流二极管 1000V,1.5A,<br>1N5400 硅整流二极管 50V, 3A,(Ir=5uA,Vf=1V,Ifs=150A)<br>1N5401 硅整流二极管 100V,3A,<br>1N5402 硅整流二极管 200V,3A,<br>1N5403 硅整流二极管 300V,3A,<br>1N5404 硅整流二极管 400V,3A,<br>1N5405 硅整流二极管 500V,3A,<br>1N5406 硅整流二极管 600V,3A,<br>1N5407 硅整流二极管 800V,3A,<br>1N5408 硅整流二极管 1000V,3A,<br>1S1553 硅开关二极管 70V,100mA,300mW, 3.5PF,300ma,<br>1S1554 硅开关二极管 55V,100mA,300mW, 3.5PF,300ma,<br>1S1555 硅开关二极管 35V,100mA,300mW, 3.5PF,300ma,<br>1S2076 硅开关二极管 35V,150mA,250mW, 8nS, 3PF,450ma, Ir≤1uA,Vf≤0.8V,≤1.8PF,<br>1S2076A 硅开关二极管 70V,150mA,250mW,8nS, 3PF,450ma, 60V, Ir≤1uA,Vf≤0.8V,≤1.8PF,<br>1S2471 硅开关二极管 80V, Ir≤0.5uA,Vf≤1.2V,≤2PF,<br>1S2471B 硅开关二极管 90V,150mA,250mW,3nS,3PF,450ma,<br>1S2471V 硅开关二极管 90V,130mA,300mW,4nS,2PF,400ma,<br>1S2472 硅开关二极管 50V, Ir≤0.5uA,Vf≤1.2V,≤2PF,<br>1S2473 硅开关二极管 35V, Ir≤0.5uA,Vf≤1.2V,≤3PF,<br>1S2473H 硅开关二极管 40V,150mA,300mW,4nS,3PF,450ma,<br>2AN1 二极管 5A, f=100KHz<br>2CK100 硅开关二极管 40V,150mA,300mW,4nS,3PF,450ma,<br>2CK101 硅开关二极管 70V,150mA,250mW,8nS, 3PF,450ma,<br>2CK102 硅开关二极管 35V,150mA,250mW, 8nS, 3PF,450ma,<br>2CK103 硅开关二极管 20V,100mA, 2PF,100ma,<br>2CK104 硅开关二极管 35V,100mA, 10nS,2PF,225ma,<br>2CK105 硅开关二极管 35V,100mA, 4nS,2PF,225ma,<br>2CK106 硅开关二极管 75V,100mA, 4nS,2PF,100ma,<br>2CK107 硅开关二极管 90V,130mA,300mW,4nS,2PF,400ma,<br>2CK108 硅开关二极管 70V,100mA,300mW, 3.5PF,300ma,<br>2CK109 硅开关二极管 35V,100mA,300mW, 3.5PF,300ma,<br>2CK110 硅开关二极管 90V,150mA,250mW,3nS,3PF,450ma,<br>2CK111 硅开关二极管 55V,100mA,300mW, 3.5PF,300ma,<br>2CK150 硅开关二极管 15V, Ir≤25nA, Vf≤1.2V,≤2PF,<br>2CK161 硅开关二极管 15V, Ir≤25nA, Vf≤1.2V,≤2PF,<br>2CK4148 硅开关二极管 75V, Ir≤25nA,Vf=1V,4PF,<br>2CK2076 硅开关二极管 35V, Ir≤1uA,Vf≤0.8V, ≤1.8PF,<br>2CK2076A硅开关二极管 60V, Ir≤1uA,Vf≤0.8V, ≤1.8PF,<br>2CK2471 硅开关二极管 80V, Ir≤0.5uA,Vf≤1.2V,≤2PF,<br>2CK2472 硅开关二极管 50V, Ir≤0.5uA,Vf≤1.2V,≤2PF,<br>2CK2473 硅开关二极管 35V, Ir≤0.5uA,Vf≤1.2V,≤3PF,<br>2CN1A 硅二极管 400V, 1A, f=100KHz,<br>2CN1B 硅二极管 100V, 1A, f=100KHz,<br>2CN3 硅二极管 V, 1A, f=100KHz,<br>2CN3D 硅二极管 V, 1A, f=100KHz,<br>2CN3E 硅二极管 V, 1A, f=100KHz,<br>2CN3F 硅二极管 V, 1A, f=100KHz,<br>2CN3G 硅二极管 V, 1A, f=100KHz,<br>2CN3H 硅二极管 V, 1A, f=100KHz,<br>2CN3I 硅二极管 V, 1A, f=100KHz,<br>2CN3K 硅二极管 V, 1A, f=100KHz,<br>2CN4D 硅二极管 V, 1.5A,f=100KHz,<br>2CN5D 硅二极管 V, 1.5A, f=100KHz,<br>2CN6 硅二极管 V, 1A, f=100KHz,<br>2CP1553 硅二极管 Ir≤0.5uA,Vf≤1.4V,≤3.5PF,<br>2CP1554 硅二极管 Ir≤0.5uA,Vf≤1.4V,≤3.5PF,<br>2CP1555 硅二极管 Ir≤0.5uA,Vf≤1.4V,≤3.5PF, </p><h4 id="3-稳压二极管"><a href="#3-稳压二极管" class="headerlink" title="3.稳压二极管"></a><strong>3.稳压二极管</strong></h4><h5 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h5><p>稳压二极管又叫齐纳二极管。利用pn结反向击穿状态，其电流可在很大范围内变化而电压基本不变的现象，制成的起稳压作用的二极管。</p><h5 id="应用：-2"><a href="#应用：-2" class="headerlink" title="应用："></a>应用：</h5><p>稳压管主要被作为稳压器或电压基准元件使用。稳压二极管可以串联起来以便在较高的电压上使用，通过串联就可获得更高的稳定电压。<br>1、浪涌保护电路(如图2):稳压管在准确的电压下击穿，这就使得它可作为限制或保护之元件来使用，因为各种电压的稳压二极管都可以得到，故对于这种应用特别适宜.图中的稳压二极管D是作为过压保护器件.只要电源电压VS超过二极管的稳压值D就导通，使继电器J吸合负载RL就与电源分开.<br><img src="/images/浪涌保护电路.jpg" alt=""><br>2、电视机里的过压保护电路(如图3):<br><img src="/images/过压保护电路.jpg" alt=""><br>EC是电视机主供电压，当EC<br>电压过高时，D导通，三极管BG导通，其集电极电位将由原来的高电平(5V)变为低电平，通过待机控制线的控制使电视机进入待机保护状态.<br>3、电弧抑制电路如图4<br><img src="/images/电弧抑制电路.jpg" alt=""><br>在电感线圈上并联接入一只合适的稳压二极管(也可接入一只普通二极管原理一样)的话，当线圈在导通状态切断时，由于其电磁能释放所产生的高压就被二极管所吸收，所以当开关断开时，开关的电弧也就被消除了。这个应用电路在工业上用得比较多，如一些较大功率的电磁吸控制电路就用到它.<br>4、串联型稳压电路(如图5):<br><img src="/images/串联型稳压电路.jpg" alt=""><br>在此电路中，串联稳压管，BG的基极被稳压二极管D钳定在13V，那么其发射极就输出恒定的12V电压了.这个电路在很多场合下都有应用。</p><h5 id="稳压原理："><a href="#稳压原理：" class="headerlink" title="稳压原理："></a>稳压原理：</h5><p>稳压二极管的特点就是反向通电尚未击穿前，其两端的电流基本保持不变。这样，当把稳压管接入电路以后，若由于电源电压发生波动，或其它原因造成电路中各点电压变动时，负载两端的电压将基本保持不变。<br>稳压二极管在电路中常用”ZD”加数字表示，如:ZD5表示编号为5的稳压管。</p><h4 id="4-开关二极管"><a href="#4-开关二极管" class="headerlink" title="4.开关二极管"></a><strong>4.开关二极管</strong></h4><h5 id="定义：-3"><a href="#定义：-3" class="headerlink" title="定义："></a>定义：</h5><p>开关二极管是半导体二极管的一种，是为在电路上进行”开”、”关”而特殊设计制造的一类二极管。它由导通变为截止或由截止变为导通所需的时间比一般二极管短，常见的有2AK、2DK等系列。<br><img src="/images/开关二极管.jpg" alt=""></p><h5 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h5><p>半导体二极管导通时相当于开关闭合(电路接通)，截止时相当于开关打开(电路切断)，所以二极管可作开关用，常用型号为1N4148。由于半导体二极管具有单向导电的特性，在正偏压下PN结导通，在导通状态下的电阻很小，约为几十至几百欧;在反向偏压下，则呈截止状态，其电阻很大，一般硅二极管在10ΜΩ以上，锗管也有几十千欧至几百千欧。利用这一特性，二极管将在电路中起到控制电流接通或关断的作用，成为一个理想的电子开关。<br>以上的描述，其实适用于任何一支普通的二极管，或者说是二极管本身的原理。但针对于开关二极管，最重要的特点是高频条件下的表现。<br>高频条件下，二极管的势垒电容表现出来极低的阻抗，并且与二极管并联。当这个势垒电容本身容值达到一定程度时，就会严重影响二极管的开关性能。极端条件下会把二极管短路，高频电流不再通过二极管，而是直接绕路势垒电容通过，二极管就失效了。而开关二极管的势垒电容一般极小，这就相当于堵住了势垒电容这条路，达到了在高频条件下还可以保持好的单向导电性的效果。</p><h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><p>开关二极管分为普通开关二极管、高速开关二极管、超高速开关二极管、低功耗开关二极管、高反压开关二极管、硅电压开关二极管等多种。</p><p>折叠<br>普通开关二极管<br>常用的国产普通开关二极管有2AK系列锗开关二极管，表4-8为2AK系开关二极管的主要参数。</p><p>高速开关二极管<br>高速开关二极管较普通开关二极管的反向恢复时间更短，开、关频率更快。<br>常用的国产高速开关二极管有2CK系列。<br>进口高速开关二极管有1N系列、1S系列、1SS系列(有引线塑封)和RLS系列(表面安装)。</p><p>超高速开关二极管<br>常用的超高速二极管有1SS系列(有引线塑封)和RLS系列(表面封装)。</p><p>低功耗开关二极管<br>低功耗开关二极管的功耗较低，但其零偏压电容和反向恢复时间值均较高速开关二极管低。<br>常用的低功耗开关二极管有RLS系列(表面封装)和1SS系列(有引线塑封)。</p><p>高反压开关二极管<br>高反压开关二极管的反向击穿电压均在220V以上，但其零偏压电容和反向恢复时间值相对较大。<br>常用的高反压开关二极管有RLS系列(表面封装)和1SS系列(有引线塑封) 。</p><p>硅电压开关二极管<br>硅电压开关二极管是一种新型半导体器件，有单向电压开关二极管和双向电压开关二极管之分，主要应用于触发器、过压保护电路、脉冲发生器及高压输出、延时、电子开关等电路。<br>单向电压开关二极管也称转折二极管，邮PnPN四层结构的硅半导体材料组成，其正向为负阻开关特性(指当外加电压升高到正向转折电压值时，开关二极管由截止状态变为导通状态，即由高阻转为低阻)，反向为稳定特性。双向电压二极管由NPnPN五层结构的硅半导体材料组成，其正向和反向均具有相同的负阻开关特性。</p><h5 id="应用：-3"><a href="#应用：-3" class="headerlink" title="应用："></a>应用：</h5><p>主要用于电子计算机、脉冲和开关电路中。广泛应用于电子设备的开关电路、检波电路、高频和脉冲整流电路及自动控制电路中。<br><img src="/images/开关二极管1.jpg" alt=""><br><img src="/images/开关二极管2.jpg" alt=""></p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>开关二极管具有开关速度快、体积小、寿命长、可靠性高等特点。</p><h4 id="5-肖特基二极管"><a href="#5-肖特基二极管" class="headerlink" title="5.肖特基二极管"></a><strong>5.肖特基二极管</strong></h4><h5 id="定义：-4"><a href="#定义：-4" class="headerlink" title="定义："></a>定义：</h5><p>肖特基二极管是以其发明人肖特基博士（Schottky）命名的，SBD是肖特基势垒二极管的简称。<br><img src="/images/肖特基二极管1.jpg" alt=""></p><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>SBD不是利用P型半导体与N型半导体接触形成PN结原理制作的，而是利用金属与半导体接触形成的金属－半导体结原理制作的。SBD的结构及特点使其适合于在低压、大电流输出场合用作高频整流，在非常高的频率下（如X波段、C波段、S波段和Ku波段）用于检波和混频，在高速逻辑电路中用作箝位。典型的肖特基整流管的内部电路结构是以N型半导体为基片，在上面形成用砷作掺杂剂的N-外延层。阳极使用钼或铝等材料制成阻档层。用二氧化硅(SiO2)来消除边缘区域的电场，提高管子的耐压值。N型基片具有很小的通态电阻，其掺杂浓度较H-层要高100%倍。在基片下边形成N+阴极层，其作用是减小阴极的接触电阻。通过调整结构参数，N型基片和阳极金属之间便形成肖特基势垒，如图所示。当在肖特基势垒两端加上正向偏压(阳极金属接电源正极，N型基片接电源负极)时，肖特基势垒层变窄，其内阻变小;反之，若在肖特基势垒两端加上反向偏压时，肖特基势垒层则变宽，其内阻变大。<br>综上所述，肖特基整流管的结构原理与PN结整流管有很大的区别通常将PN结整流管称作结整流管，而把金属-半导管整流管叫作肖特基整流管，采用硅平面工艺制造的铝硅肖特基二极管也已问世，这不仅可节省贵金属，大幅度降低成本，还改善了参数的一致性。<br><img src="/images/肖特基二极管2.jpg" alt=""></p><p>#####作用：<br>肖特基二极管肖特基(Schottky)二极管，又称肖特基势垒二极管(简称 SBD)，它属一种低功耗、超高速半导体器件。最显著的特点为反向恢复时间极短(可以小到几纳秒)，正向导通压降仅0.4V左右。其多用作高频、低压、大电流整流二极管、续流二极管、保护二极管，也有用在微波通信等电路中作整流二极管、小信号检波二极管使用。在通信电源、变频器等中比较常见。<br>一个典型的应用，是在双极型晶体管 BJT 的开关电路里面，通过在 BJT 上连接 Shockley 二极管来箝位，使得晶体管在导通状态时其实处于很接近截止状态，从而提高晶体管的开关速度。这种方法是 74LS，74ALS，74AS 等典型数字 IC 的 TTL内部电路中使用的技术。<br>肖特基(Schottky)二极管的最大特点是正向压降 VF 比较小。在同样电流的情况下，它的正向压降要小许多。另外它的恢复时间短。它也有一些缺点:耐压比较低，漏电流稍大些。选用时要全面考虑。</p><h5 id="应用：-4"><a href="#应用：-4" class="headerlink" title="应用："></a>应用：</h5><p>SBD的结构及特点使其适合于在低压、大电流输出场合用作高频整流，在非常高的频率下(如X波段、C波段、S波段和Ku波段)用于检波和混频，在高速逻辑电路中用作箝位。在IC中也常使用SBD，像SBD?TTL集成电路早已成为TTL电路的主流，在高速计算机中被广泛采用。<br>除了普通PN结二极管的特性参数之外，用于检波和混频的SBD电气参数还包括中频阻抗(指SBD施加额定本振功率时对指定中频所呈现的阻抗，一般在200Ω~600Ω之间)、电压驻波比(一般≤2)和噪声系数等。<br><img src="/images/肖特基二极管应用电路1.jpg" alt=""><br><img src="/images/肖特基二极管应用电路2.jpg" alt=""></p><h4 id="6-发光二极管"><a href="#6-发光二极管" class="headerlink" title="6.发光二极管"></a><strong>6.发光二极管</strong></h4><h5 id="定义：-5"><a href="#定义：-5" class="headerlink" title="定义："></a>定义：</h5><p>发光二极管简称为LED。由含镓（Ga）、砷（As）、（P）、氮（N）等的化合物制成。当电子与空穴复合时能辐射出可见光，因而可以用来制成发光二极管。</p><h5 id="应用：-5"><a href="#应用：-5" class="headerlink" title="应用："></a>应用：</h5><p>在电路及仪器中作为指示灯，或者组成文字或数字显示。砷化镓二极管发红光，磷化镓二极管发绿光，碳化硅二极管发黄光，氮化镓二极管发蓝光。<br><img src="/images/发光二极管1.jpg" alt=""><br><img src="/images/发光二极管2.jpg" alt=""> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the second passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>the first passage</title>
    <link href="http://qinzhengchao.github.io/2019/02/15/the-first-passage/"/>
    <id>http://qinzhengchao.github.io/2019/02/15/the-first-passage/</id>
    <published>2019-02-15T14:21:29.000Z</published>
    <updated>2019-02-17T05:27:01.600Z</updated>
    
    <content type="html"><![CDATA[<p>this is the first passage of HEXO<br>SEVO 实验室<br><a id="more"></a></p><h1 id="近期学习总结"><a href="#近期学习总结" class="headerlink" title="近期学习总结"></a><strong>近期学习总结</strong></h1><p>从放假开始到现在进行了软件及硬件的学习，在这个过程中收获了很多</p><h3 id="硬件方面"><a href="#硬件方面" class="headerlink" title="硬件方面"></a><strong>硬件方面</strong></h3><p>从最开始的画元器件的原理图，到后来按照学长给的电驱原理图画属于自己的PCB，当然也遇到了很多的问题，在使用AD18的过程中，逐步学会了如何从已有的PCB中导出元件库，重新定义PCB shape尺寸，同时向实验室的其他同学请教，了解了更多AD18的快捷键组合，知道了如何进行原理图和PCB的交互，很大程度上提高了画板子的效率。当然，现在学习的内容还是非常的基础，开学之后还需要学习更多的知识。</p><h3 id="软件方面"><a href="#软件方面" class="headerlink" title="软件方面"></a><strong>软件方面</strong></h3><p>进入实验室之后才发现，在做智能车的时候所用到的知识确实的非常的基础，假期开始从新建工程开始，了解了如何选择启动文件，知道了包含文件的名称及次序。</p><h2 id="下面是我对串口通信的理解（参考《零死角玩转STM32》）"><a href="#下面是我对串口通信的理解（参考《零死角玩转STM32》）" class="headerlink" title="下面是我对串口通信的理解（参考《零死角玩转STM32》）"></a><strong>下面是我对串口通信的理解（参考《零死角玩转STM32》）</strong></h2><p>串口通信数据信号由发送设备的TXD接口传输到接收设备的RXD接口，二者之间要约定好波特率，常见的波特率为4800，9600，115200.有效数据的长度通常被约定为5，6，7，8位长。USART支持使用DMA，实现高速数据通信，假期任务四中就有DMA多通道采集电压，但是我不太能看懂USART功能框图，TX功能引脚是发送数据输出引脚，RX引脚是接收数据输出引脚，在正点原子的教程中了解SCLK引脚在后期可能会用到，现在应用范围较窄。（其他的引脚及其功能在trello中有详细的说明）</p><h3 id="串口通讯协议简介"><a href="#串口通讯协议简介" class="headerlink" title="串口通讯协议简介"></a>串口通讯协议简介</h3><p>串口通讯(Serial Communication)是一种设备间非常常用的串行通讯方式，因为它简单便捷，因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。<br>在计算机科学里，大部分复杂的问题都可以通过分层来简化。如芯片被分为内核层和<br>片上外设；STM32 标准库则是在寄存器与用户代码之间的软件层。对于通讯协议，我们也以分层的方式来理解，最基本的是把它分为物理层和协议层。物理层规定通讯系统中具有机械、电子功能部分的特性，确保原始数据在物理媒体的传输。协议层主要规定通讯逻辑，统一收发双方的数据打包、解包标准。简单来说物理层规定我们用嘴巴还是用肢体来交流，协议层则规定我们用中文还是英文来交流</p><h3 id="USART-初始化结构体详解"><a href="#USART-初始化结构体详解" class="headerlink" title="USART 初始化结构体详解"></a>USART 初始化结构体详解</h3><p>标准库函数对每个外设都建立了一个初始化结构体，比如 USART_InitTypeDef，结构体成员用于设置外设工作参数，并由外设初始化配置函数，比如 USART_Init()调用，这些设定参数将会设置外设相应的寄存器，达到配置外设工作环境的目的。<br>初始化结构体和初始化库函数配合使用是标准库精髓所在，理解了初始化结构体每个<br>成员意义基本上就可以对该外设运用自如了。初始化结构体定义在stm32f10x_usart.h 文件中，初始化库函数定义在 stm32f10x_usart.c 文件中，编程时我们可以结合这两个文件内注<br>释使用。</p><h4 id="初始化结构体代码如下"><a href="#初始化结构体代码如下" class="headerlink" title="初始化结构体代码如下"></a>初始化结构体代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 typedef struct </span><br><span class="line">2 &#123;</span><br><span class="line">3 uint32_t USART_BaudRate;// 波特率</span><br><span class="line">4 uint16_t USART_WordLength;// 字长</span><br><span class="line">5 uint16_t USART_StopBits;// 停止位</span><br><span class="line">6 uint16_t USART_Parity;// 校验位</span><br><span class="line">7 uint16_t USART_Mode;// USART 模式</span><br><span class="line">8 uint16_tUSART_HardwareFlowControl;// 硬件流控制 </span><br><span class="line">&#125;</span><br><span class="line">9 USART_InitTypeDef;</span><br></pre></td></tr></table></figure><h4 id="USART-时钟初始化结构体"><a href="#USART-时钟初始化结构体" class="headerlink" title="USART 时钟初始化结构体"></a>USART 时钟初始化结构体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 typedef struct &#123;</span><br><span class="line">2 uint16_t USART_Clock; // 时钟使能控制</span><br><span class="line">3 uint16_t USART_CPOL; // 时钟极性</span><br><span class="line">4 uint16_t USART_CPHA; // 时钟相位</span><br><span class="line">5 uint16_t USART_LastBit; // 最尾位时钟脉冲</span><br><span class="line">6 &#125; USART_ClockInitTypeD</span><br></pre></td></tr></table></figure><h4 id="GPIO-和-USART-宏定义"><a href="#GPIO-和-USART-宏定义" class="headerlink" title="GPIO 和 USART 宏定义"></a>GPIO 和 USART 宏定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1 /**</span><br><span class="line">2 * 串口宏定义，不同的串口挂载的总线和 IO 不一样，移植时需要修改这几个宏</span><br><span class="line">3 */</span><br><span class="line">4 </span><br><span class="line">5 // 串口 1-USART1</span><br><span class="line">6 #define DEBUG_USARTx USART1</span><br><span class="line">7 #define DEBUG_USART_CLK RCC_APB2Periph_USART1</span><br><span class="line">8 #define DEBUG_USART_APBxClkCmd RCC_APB2PeriphClockCmd</span><br><span class="line">9 #define DEBUG_USART_BAUDRATE 115200</span><br><span class="line">10 </span><br><span class="line">11 // USART GPIO 引脚宏定义</span><br><span class="line">12 #define DEBUG_USART_GPIO_CLK (RCC_APB2Periph_GPIOA)</span><br><span class="line">13 #define DEBUG_USART_GPIO_APBxClkCmd RCC_APB2PeriphClockCmd</span><br><span class="line">14 </span><br><span class="line">15 #define DEBUG_USART_TX_GPIO_PORT GPIOA</span><br><span class="line">16 #define DEBUG_USART_TX_GPIO_PIN GPIO_Pin_9</span><br><span class="line">17 #define DEBUG_USART_RX_GPIO_PORT GPIOA</span><br><span class="line">18 #define DEBUG_USART_RX_GPIO_PIN GPIO_Pin_10</span><br><span class="line">19 </span><br><span class="line">20 #define DEBUG_USART_IRQ USART1_IRQn</span><br><span class="line">21 #define DEBUG_USART_IRQHandler USART1_IRQHandler</span><br></pre></td></tr></table></figure><h2 id="下面是看正点原子所做的笔记"><a href="#下面是看正点原子所做的笔记" class="headerlink" title="下面是看正点原子所做的笔记"></a><strong>下面是看正点原子所做的笔记</strong></h2><p>学习STM32需要掌握库函数的基本配置方法。了解寄存器底层配置过程。基本外设包括GPIO输入输出，外部中断，定时器，串口。STM32最小系统包含供电复位时钟：外部晶振（两个），Boot启动模式选择，下载电路（串口/JTAG/SWD)，后备电池。USB串口有以下三个作用：</p><h4 id="1-可以当串口使用"><a href="#1-可以当串口使用" class="headerlink" title="1.可以当串口使用"></a>1.可以当串口使用</h4><h4 id="2-如果USB串口连接到STM32的串口1（STM32ISP下载只能是串口1）的话，那么可以用串口下载程序"><a href="#2-如果USB串口连接到STM32的串口1（STM32ISP下载只能是串口1）的话，那么可以用串口下载程序" class="headerlink" title="2.如果USB串口连接到STM32的串口1（STM32ISP下载只能是串口1）的话，那么可以用串口下载程序"></a>2.如果USB串口连接到STM32的串口1（STM32ISP下载只能是串口1）的话，那么可以用串口下载程序</h4><h4 id="3-因为要连接到USB，所以可以用USB供电"><a href="#3-因为要连接到USB，所以可以用USB供电" class="headerlink" title="3.因为要连接到USB，所以可以用USB供电"></a>3.因为要连接到USB，所以可以用USB供电</h4><p>（包含CH340驱动安装方法）</p><h4 id="如何新建STM32工程模板在trello中有详细的说明"><a href="#如何新建STM32工程模板在trello中有详细的说明" class="headerlink" title="如何新建STM32工程模板在trello中有详细的说明"></a>如何新建STM32工程模板在trello中有详细的说明</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is the first passage of HEXO&lt;br&gt;SEVO 实验室&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://qinzhengchao.github.io/2019/02/05/hello-world/"/>
    <id>http://qinzhengchao.github.io/2019/02/05/hello-world/</id>
    <published>2019-02-05T14:13:32.076Z</published>
    <updated>2019-02-16T10:41:29.564Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
